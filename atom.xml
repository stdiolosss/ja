<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stdiolosss</title>
  
  
  <link href="http://stdiolosss.com/atom.xml" rel="self"/>
  
  <link href="http://stdiolosss.com/"/>
  <updated>2024-10-15T12:11:30.361Z</updated>
  <id>http://stdiolosss.com/</id>
  
  <author>
    <name>losss</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>follow-rss</title>
    <link href="http://stdiolosss.com/2024/10/15/cn/follow-rss/"/>
    <id>http://stdiolosss.com/2024/10/15/cn/follow-rss/</id>
    <published>2024-10-15T13:02:27.000Z</published>
    <updated>2024-10-15T12:11:30.361Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>以下是 RSS 订阅认证信息：</p><pre><code><follow_challenge>    <feedId>68663100263030784</feedId>    <userId>68182423782777856</userId></follow_challenge></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;以下是 RSS 订阅认证信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;follow_challenge&gt;
    &lt;feedId&gt;68663100263030784&lt;/feedId&gt;
    &lt;userId&gt;68182423782</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>语言学习汇总(updating)</title>
    <link href="http://stdiolosss.com/2024/10/15/cn/language-learning/"/>
    <id>http://stdiolosss.com/2024/10/15/cn/language-learning/</id>
    <published>2024-10-15T12:11:30.365Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>语言学习路上的二三事</p><span id="more"></span><p>因为语言学习需要的东西大同小异 所以我都整理于此</p><h2 id="资料"><a class="header-anchor" href="#资料"></a>资料</h2><h3 id="日语"><a class="header-anchor" href="#日语"></a>日语</h3><h4 id="我使用的资料"><a class="header-anchor" href="#我使用的资料"></a>我使用的资料</h4><p><a href="https://www.bilibili.com/video/av3060477/?from=search&amp;seid=15325896545265664426">标日初级</a></p><blockquote><p>叶子老师的初级课</p></blockquote><!-- [新编日语(4册全)]() --><blockquote><p>新编每一课知识点都很清晰 标日中级总感觉学了和没学一样</p></blockquote><p><a href="https://pan.baidu.com/s/1kVtGvB5">初级上册复习课</a>  密码: ui4f</p><p><a href="https://pan.baidu.com/s/1jH9Hegm">初级下册复习课</a>  密码: prns</p><h4 id="日语学习流程"><a class="header-anchor" href="#日语学习流程"></a>日语学习流程</h4><p>语言学习路途遥远,慢慢来 一开始千万不要相信什么3个月过N2,看动漫学日语什么的,脚踏实地才是王道.</p><ol><li><p>首先跟着叶子老师把初级上下学了,学完了之后,可以看看新编标准日本语,初级阶段主要是把词汇和语法积累一下.初级语法比较重要重在理解而不是死记.</p></li><li><p>N2和N1　这时候日语其实已经有了一个可以的基础 主要的是把能力考的语法和单词背一下,多做题,平时可以看看日语的文章和对着日语的新闻做听写.</p></li><li><p>N1 之后 可以把日常看不懂的词用本子记下来,还是重在积累.</p></li></ol><h3 id="英语-2"><a class="header-anchor" href="#英语-2"></a>英语</h3><h2 id="常用工具"><a class="header-anchor" href="#常用工具"></a>常用工具</h2><h3 id="pc端"><a class="header-anchor" href="#pc端"></a>pc端</h3><h4 id="Aboboo"><a class="header-anchor" href="#Aboboo"></a>Aboboo</h4><p><a href="https://zhuanlan.zhihu.com/p/21930503?refer=-anki">工具篇——使用ABOBOO学美剧</a></p><h4 id="anki"><a class="header-anchor" href="#anki"></a>anki</h4><p><a href="https://apps.ankiweb.net">anki官网</a></p><p><a href="https://www.zhihu.com/question/43951518">Anki有哪些值得推荐的词库和插件</a></p><p><a href="https://zhuanlan.zhihu.com/p/21328602?refer=-anki">Anki终极汇总——请先看我！</a></p><h5 id="日语-2"><a class="header-anchor" href="#日语-2"></a>日语</h5><p><a href="https://zhuanlan.zhihu.com/p/21702356?refer=-anki">工具篇——日语划词助手</a></p><p>注: 1下那个chrome插件的时候记得去下字典</p><h5 id="英语-3"><a class="header-anchor" href="#英语-3"></a>英语</h5><p><a href="https://www.zhihu.com/question/20977466/answer/234197535">如何使用anki 高效地背诵 新概念英语</a></p><p><a href="https://zhuanlan.zhihu.com/p/22472893?refer=-anki">英语插件？ 有这一个就够了——工具篇【Anki划词制卡助手】</a></p><h4 id="EBwin"><a class="header-anchor" href="#EBwin"></a>EBwin</h4><p>一个很好用的本地日语字典</p><h3 id="app"><a class="header-anchor" href="#app"></a>app</h3><h4 id="aTimeLogger2"><a class="header-anchor" href="#aTimeLogger2"></a>aTimeLogger2</h4><p>时间管理软件</p><h4 id="学习助手"><a class="header-anchor" href="#学习助手"></a>学习助手</h4><p>可以利用艾宾浩斯来提示复习的软件</p><h4 id="日语-3"><a class="header-anchor" href="#日语-3"></a>日语</h4><h5 id="语法酷"><a class="header-anchor" href="#语法酷"></a>语法酷</h5><p>可以查日语语法的软件</p><h4 id="英语-4"><a class="header-anchor" href="#英语-4"></a>英语</h4><h5 id="墨墨单词"><a class="header-anchor" href="#墨墨单词"></a>墨墨单词</h5><h2 id="常用网站"><a class="header-anchor" href="#常用网站"></a>常用网站</h2><h3 id="日语-4"><a class="header-anchor" href="#日语-4"></a>日语</h3><p><a href="http://www3.nhk.or.jp/">nhk新闻</a></p><h3 id="时间管理"><a class="header-anchor" href="#时间管理"></a>时间管理</h3><p><a href="https://trello.com">trello</a></p><p><a href="https://www.tmanager.co">tmanager</a></p><p>整合谷歌日历和trello的日历 介绍  <a href="http://www.playpcesor.com/2017/10/tmanager-google-calendar-trello.html">http://www.playpcesor.com/2017/10/tmanager-google-calendar-trello.html</a></p><h2 id="考试"><a class="header-anchor" href="#考试"></a>考试</h2><h3 id="日语-5"><a class="header-anchor" href="#日语-5"></a>日语</h3><h4 id="N2考试"><a class="header-anchor" href="#N2考试"></a>N2考试</h4><p>考试时间分配</p><table><thead><tr><th style="text-align:center">开始</th><th style="text-align:center">结束</th><th style="text-align:center">题目序号</th><th style="text-align:center">用时(单位:分)</th></tr></thead><tbody><tr><td style="text-align:center">13:30</td><td style="text-align:center">13:50</td><td style="text-align:center">6</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">13:50</td><td style="text-align:center">14:10</td><td style="text-align:center">9</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">13:40</td><td style="text-align:center">13:55</td><td style="text-align:center">10</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">14:25</td><td style="text-align:center">14:49</td><td style="text-align:center">11</td><td style="text-align:center">24</td></tr><tr><td style="text-align:center">14:49</td><td style="text-align:center">14:56</td><td style="text-align:center">12</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">14:56</td><td style="text-align:center">15:08</td><td style="text-align:center">13</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">15:38</td><td style="text-align:center">15:45</td><td style="text-align:center">14</td><td style="text-align:center">7</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;语言学习路上的二三事&lt;/p&gt;</summary>
    
    
    
    <category term="日本語" scheme="http://stdiolosss.com/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/"/>
    
    <category term="English" scheme="http://stdiolosss.com/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/English/"/>
    
    
    <category term="tools" scheme="http://stdiolosss.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>logseq</title>
    <link href="http://stdiolosss.com/2021/05/04/cn/logseq/"/>
    <id>http://stdiolosss.com/2021/05/04/cn/logseq/</id>
    <published>2021-05-04T11:26:41.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>logseq 笔记整理+一点点的个人整理</p><span id="more"></span><h2 id="基础知识"><a class="header-anchor" href="#基础知识"></a>基础知识</h2><p><a href="https://zhuanlan.zhihu.com/p/343854552">入门教程</a><br><a href="https://cn.logseq.com/">中文社区</a></p><h2 id="query"><a class="header-anchor" href="#query"></a>query</h2><p><a href="http://www.learndatalogtoday.org/">learndatalogtoday</a><br><a href="https://docs.datomic.com/on-prem/query/query.html">Datomic query syntax</a><br><a href="https://logseq.github.io/#/page/Advanced%20Queries">Advanced Queries</a></p><h2 id="一些检索式分享"><a class="header-anchor" href="#一些检索式分享"></a>一些检索式分享</h2><p><a href="https://xutuan.vercel.app/#/page/logseq%E6%A3%80%E7%B4%A2%E5%85%AC%E5%BC%8F%E5%88%86%E4%BA%AB">论坛</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;logseq 笔记整理+一点点的个人整理&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>japan-estate</title>
    <link href="http://stdiolosss.com/2021/04/16/cn/japan-estate/"/>
    <id>http://stdiolosss.com/2021/04/16/cn/japan-estate/</id>
    <published>2021-04-16T14:32:02.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>东京房地产思考</p><span id="more"></span><h2 id="购房费用"><a class="header-anchor" href="#购房费用"></a>购房费用</h2><h2 id="房子的价格"><a class="header-anchor" href="#房子的价格"></a>房子的价格</h2><ol><li>购房时的首付</li><li>每月的贷款</li></ol><h2 id="买后费用"><a class="header-anchor" href="#买后费用"></a>买后费用</h2><h3 id="只支付一次的费用"><a class="header-anchor" href="#只支付一次的费用"></a>只支付一次的费用</h3><ol><li>搬家费</li><li>重新装修的费用</li><li>不动产取得税</li></ol><h3 id="每月支付的费用"><a class="header-anchor" href="#每月支付的费用"></a>每月支付的费用</h3><p>物业费,管理费,停车费</p><h3 id="每年支付的费用"><a class="header-anchor" href="#每年支付的费用"></a>每年支付的费用</h3><h3 id="特定年支付的费用"><a class="header-anchor" href="#特定年支付的费用"></a>特定年支付的费用</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;东京房地产思考&lt;/p&gt;</summary>
    
    
    
    <category term="东京生活" scheme="http://stdiolosss.com/categories/%E4%B8%9C%E4%BA%AC%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="房产,投资" scheme="http://stdiolosss.com/tags/%E6%88%BF%E4%BA%A7-%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>日本生活要交多少税</title>
    <link href="http://stdiolosss.com/2021/04/05/cn/japan-tax/"/>
    <id>http://stdiolosss.com/2021/04/05/cn/japan-tax/</id>
    <published>2021-04-05T14:56:36.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>主要针对正社员和个人事业主在日本生活需要支付的保险,税等费用以及节税方法说明<br>※个人整理,如果有误,以官方为准</p><span id="more"></span><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>不得不说日本的税务系统是真的复杂,都是只言片语,没有几个人能说明白</p><h2 id="税的种类"><a class="header-anchor" href="#税的种类"></a>税的种类</h2><p>税一般分为国税和地方税</p><p>国税和地方税可以上 <a href="https://www.mof.go.jp/tax_policy/summary/condition/a01.htm">财务省官网</a>查看</p><h2 id="几个基础概念"><a class="header-anchor" href="#几个基础概念"></a>几个基础概念</h2><h3 id="源泉征收"><a class="header-anchor" href="#源泉征收"></a>源泉征收</h3><p>对象:正社员<br>概念:税务局从工资支付者(公司)哪里征收劳动者的所得税,通过公司给个人缴税<br><a href="https://www.nta.go.jp/publication/pamph/gensen/gaikokugo/03.htm">国税局官网说明</a></p><p>每年年末的源泉征收票就是纳税明细</p><h3 id="年末调整"><a class="header-anchor" href="#年末调整"></a>年末调整</h3><p>对象:正社员<br>年底(一般是 12 月初)劳动者想公司提交各种控除证明书,公司以此计算正确的纳税金额,然后替应纳税人去税务局纳税</p><h3 id="正社员的一年的纳税流程"><a class="header-anchor" href="#正社员的一年的纳税流程"></a>正社员的一年的纳税流程</h3><p>每月工资会以前年的所得算出源泉征收的所得税=&gt;年底进行年末调整根据实际的所得和控除算出正确的应纳税金额=&gt;向税务局申报(多退少补)</p><h3 id="确定申告"><a class="header-anchor" href="#确定申告"></a>确定申告</h3><p>对象:任何人都行<br>概念:向税务局申告应交的所得税<br>时间:第二年 3 月上旬</p><h3 id="年金"><a class="header-anchor" href="#年金"></a>年金</h3><p>年金,简单来说就是养老金.有两种一种是公的年金(国民年金と厚生年金),私的年金(個人型確定拠出年金（iDeCo：イデコ）等)</p><ol><li>公的年金<br>对于身份不同的人需要缴纳的金额,年限也不同,具体可以参考 <a href="https://www.nenkin.go.jp/service/kounen/hokenryo/index.html">日本年金机构官网</a>也可以看这个<a href="https://www.youtube.com/watch?v=y-2AGWX9MWM&amp;ab_channel=%E4%B8%A1%E5%AD%A6%E9%95%B7%E3%83%AA%E3%83%99%E3%83%A9%E3%83%AB%E3%82%A2%E3%83%BC%E3%83%84%E5%A4%A7%E5%AD%A6">视频 1</a><br><a href="https://www.youtube.com/watch?v=qa9gIqE5sJQ">简要说明</a><br>国民年金:固定每月 16,590 円<a href="https://www.nenkin.go.jp/service/kokunen/hokenryo/20150313-02.html">国民年金保険料｜日本年金機構</a><br>厚生年金:<a href="https://www.nenkin.go.jp/service/kounen/hokenryo/hoshu/20150515-01.html">厚生年金保険の保険料｜日本年金機構</a>　对象<br>金额=每年 4-6 月的报酬 × 保険料率(18.3％*仅供参考可能变化)<br>结论:交厚生年金是不划算的,因为交的多,拿的少.但对于会社员来说是必须要交的. 上面视频 1 里面有具体不交和减免的办法.还有如果想要申请永驻的话也要交不然对审查不利<br><a href="https://www.youtube.com/watch?v=a9oQ2y9shoI">年金の未納期間がある人必見！超簡単な解決策あります - YouTube</a></li><li>私的年金<br>这个种类比较多 常见的有 iDeCo<a href="https://www.youtube.com/watch?v=heIIAwHYywk&amp;t=1120s&amp;ab_channel=BANKACADEMY%2F%E3%83%90%E3%83%B3%E3%82%AF%E3%82%A2%E3%82%AB%E3%83%87%E3%83%9F%E3%83%BC">可以参考这个视频</a><br>iDeCo 的缺点是每年利息低,只能到期取回.优点是可以节税<br>和 iDeCo 对应的有 積立 NISA,优点是节税和随时取回.缺点是风险高,有亏损的可能.</li></ol><h2 id="到底哪些税要怎么算"><a class="header-anchor" href="#到底哪些税要怎么算"></a>到底哪些税要怎么算</h2><p>正社员和个人事业主的计算方法有所不同,这里分开比较</p><h3 id="正社员"><a class="header-anchor" href="#正社员"></a>正社员</h3><p>正社员由于天引き制度,年金 保险 税金都是由公司在每月的工资里面按照前一年的工资水平计算出的金额支出,再由每年的年末调整来退还多交的部分.所以即使不知道要交多少也没有关系</p><h4 id="社会保险"><a class="header-anchor" href="#社会保险"></a>社会保险</h4><table><thead><tr><th>対象の保険</th><th>保険料率</th><th>備考</th></tr></thead><tbody><tr><td>厚生年金</td><td>18.3%</td><td>今後引き上げられる予定はなし</td></tr><tr><td>健康保険</td><td>10.0%</td><td>平成 24 年度から変更なし</td></tr><tr><td>介護保険</td><td>1.80%</td><td>令和 3 年度から改定された</td></tr><tr><td>雇用保険</td><td>0.90%</td><td>内訳は以下・会社負担：0.60% ・個人負担：0.30% → 引き上げの検討も（令和 3 年 10 月時点）</td></tr><tr><td>労災保険</td><td>0.30%</td><td>3 年に一度変更も、令和 3 年度は見送り</td></tr></tbody></table><h5 id="厚生年金"><a class="header-anchor" href="#厚生年金"></a>厚生年金</h5><p>正社员属于第二号被保险者,要交缴纳厚生年金</p><h5 id="健康保险"><a class="header-anchor" href="#健康保险"></a>健康保险</h5><p>正社员健康保险和厚生年金计算方式类似,计算后也是公司和个人各出一半,计算公式具体如下<br>健康保険料＝標準報酬月額 × 健康保険料率(9.87%*仅供参考))</p><h4 id="税金"><a class="header-anchor" href="#税金"></a>税金</h4><h5 id="住民税"><a class="header-anchor" href="#住民税"></a>住民税</h5><p><a href="https://www.youtube.com/watch?v=dVJkg8XcbtE&amp;t=787s&amp;ab_channel=%E3%82%B5%E3%83%B3%E3%83%87%E3%83%BC%E3%83%9E%E3%83%8D%E3%83%BC%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB">住民税</a></p><h5 id="所得税-☆"><a class="header-anchor" href="#所得税-☆"></a>所得税 ☆</h5><p>① 给与-给与所得控除=给与所得<br>② 给与所得-所得控除=课税所得<br>③ 课税所得*税率=所得税<br>④ 所得税-税额控除=应交所得税<br>给与:工资收入<br>给与所得控除:虽然上班族没有经费这个概念,但是还是会根据收入的多少有个固定的控除额,具体金额可以<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1410.htm">参考这里</a><br>税率<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/2260.htm">可以参考这里</a><br>注意 ③ 的计算是分段计算的比如 700w 的情况下<br>(1,949,000-1000)×0.05+…+(7,000,000-6,950,000)×0.23= 974,000 円<br>快速计算是下面的样子<br>7,000,000 円 ×0.23 - 636,000 円= 974,000 円<br>税额控除:节税里面解释<br>课税所得才是</p><h4 id="节税"><a class="header-anchor" href="#节税"></a>节税</h4><h5 id="所得税节税"><a class="header-anchor" href="#所得税节税"></a>所得税节税</h5><p>再把所得税计算拿过来看一下<br>① 给与-给与所得控除=给与所得<br>② 给与所得-所得控除=课税所得<br>③ 课税所得*税率=所得税<br>④ 所得税-税额控除=应交所得税</p><ol><li><p>② 增加加所得控除<br>所得控除:种类非常多具体可以<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/shoto320.htm">参考这里</a><br>下面简单说明下可以利用的一些控除,注意有些控除不能通过年末调整而是要自己通过确定申告来申请.</p><table><thead><tr><th>种类</th><th>说明</th><th>申告方式</th></tr></thead><tbody><tr><td>基础控除</td><td>自动申请每个人都会有</td><td>自动申请</td></tr><tr><td>雑損控除</td><td>災害又は盗難若しくは横領によって、資産について損害を受けた場合等には、一定の金額の所得控除を受けることができます。これを雑損控除といいます。</td><td>确定申告</td></tr><tr><td>医療費控除</td><td>对于大于 10w 部分的医疗费可以进行控除</td><td>确定申告</td></tr><tr><td>社会保険料控除</td><td>交的健康保険、国民年金、厚生年金保険等等保险金额</td><td>自动申请</td></tr><tr><td>小規模企業共済等掛金控除</td><td>这个比较常见的有 iDeCo</td><td>确定申告</td></tr><tr><td>生命保険料控除</td><td>生命保険料、介護医療保険料及び個人年金保険料それぞれ４万円が上限です.※不划算,不是很推荐买个人保险</td><td>年末调整</td></tr><tr><td>地震保険料控除</td><td>上限 5w</td><td>确定申告</td></tr><tr><td>障害者控除</td><td>納税者自身、同一生計配偶者（注）又は扶養親族が所得税法上の障害者に当てはまる場合には、一定の金額の所得控除を受けることができます。これを障害者控除といいます。</td><td>年末调整</td></tr><tr><td>寄附金控除</td><td>☆ ふるさと納税这个特别有用下面会特别说明</td><td>可以自动申请具体看ふるさと納税说明</td></tr><tr><td>寡婦控除</td><td></td><td>年末调整</td></tr><tr><td>勤労学生控除</td><td></td><td>年末调整</td></tr><tr><td>配偶者控除</td><td>有配偶并且配偶收入有限制</td><td>年末调整</td></tr><tr><td>扶養控除</td><td>☆ 特别有用<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1180.htm">参考这里</a></td><td>年末调整</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>④ 增加税额控除<br>税额控除<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1200.htm">具体看这里</a>因为这里是对最后的税金部分直接控除,青色申告也是在这一类(个人事业主可以,正社员就没有青色申告了)所以有的话一定不要错过.下面说说可以利用的税额控除</p><ol><li>住宅借入金等特別控除（住宅ローン控除）这个通过贷款买房,确定申告可以申请,这个是直接减去所得税和住民税非常有用,上限是 40w <a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1213.htm">具体看这里</a></li><li>寄附金控除</li></ol></li><li><p>① 调整税前所得<br>缺点:因为会降低收入,所以在贷款买房时贷款上限会有所降低.<br>这个对于有副业的朋友适用.比如买房投资的人可以利用減価償却費来使收入变为负数从而降低总体收入.</p></li></ol><h3 id="个人事业主"><a class="header-anchor" href="#个人事业主"></a>个人事业主</h3><h4 id="简介"><a class="header-anchor" href="#简介"></a>简介</h4><p>※先说个人事业主的最大缺点: 个人事业主因为工作稳定性比较低,贷款比较困难,因为就算你前一年有 1000 万收入,但你并不能保证下一年的收入.所以这种情况下银行贷款很大可能就下不来了.反而是在大型企业上班,月薪 20w 的人比较好贷款.</p><p>个人事业主有两种</p><ol><li>フリーランス<br>フリーランスは、特定の企業や団体に所属しない働き方</li><li>個人事業主<br>個人事業主とは、法人を設立せず、個人として事業を行っている人のことです。</li></ol><hr><p>二者的区别是 个人事业主是需要向税务局提交開業届,而フリーランス就没有任何的需求(就算是家里蹲,也可以说自己是フリーランス),二者都可以进行确定申告,而提交開業届的个人是业主最大优点就是可以进行青色申告,可以更有效的节税.<a href="https://www.youtube.com/watch?v=6rJOpqpVgkU&amp;t=574s&amp;ab_channel=%E3%82%B5%E3%83%B3%E3%83%87%E3%83%BC%E3%83%9E%E3%83%8D%E3%83%BC%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB">详细的可以参考这个视频</a></p><p>个人事业主是相对法人的一个概念,而法人就是成立公司时候设立的,当年收入足够高的时候就可以考虑成立公司了.关于法人这里就不多做展开了.</p><hr><h4 id="有哪些税金"><a class="header-anchor" href="#有哪些税金"></a>有哪些税金</h4><ol><li><p>年金</p></li><li><p>所得税<br>① 収入－必要経費＝所得<br>② 所得－所得控除＝課税所得金額</p></li><li><p>住民税</p></li><li><p>事業税</p></li><li><p>消費税</p></li><li><p>国民健康保険料など</p></li></ol><h4 id="节税-2"><a class="header-anchor" href="#节税-2"></a>节税</h4><h2 id="国民健康保险"><a class="header-anchor" href="#国民健康保险"></a>国民健康保险</h2><p>国民健康保险是根据居住的都道府县,和前一年工资计算而来的.这里以江东区为例<br>另外国保会因为结婚生子而调涨保费，但社会保险却不会因为扶养人数增加而改变，在每个月的保费这一点来看，社保比国保来得优惠。</p><h2 id="ふるさと納税"><a class="header-anchor" href="#ふるさと納税"></a>ふるさと納税</h2><p>查询自己可以购买的上限<br><a href="https://furusato-nouzei.event.rakuten.co.jp/mypage/deductions/">楽天ふるさと納税</a><br><a href="https://www.soumu.go.jp/main_sosiki/jichi_zeisei/czaisei/czaisei_seido/furusato/mechanism/deduction.html">総務省ふるさと納税</a><br>收入参考源泉徴収票的支払金額<br>一般比上限低一些就可以</p><h2 id="参考文献"><a class="header-anchor" href="#参考文献"></a>参考文献</h2><p><a href="https://www.youtube.com/watch?v=i1qg9qoSmbQ&amp;list=PL0C7b7nvqFcXwp7xNR0c7lxwZ3bGU2qxT&amp;index=3&amp;ab_channel=TianChengTV%E3%83%BB%E5%A4%A9%E6%88%90%E7%9A%84%E9%A2%91%E9%81%93">YouTube TianCheng TV・天成的频道</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要针对正社员和个人事业主在日本生活需要支付的保险,税等费用以及节税方法说明&lt;br&gt;
※个人整理,如果有误,以官方为准&lt;/p&gt;</summary>
    
    
    
    <category term="日本生活" scheme="http://stdiolosss.com/categories/%E6%97%A5%E6%9C%AC%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="tax" scheme="http://stdiolosss.com/tags/tax/"/>
    
  </entry>
  
  <entry>
    <title>javase-net</title>
    <link href="http://stdiolosss.com/2020/10/20/cn/javase-net/"/>
    <id>http://stdiolosss.com/2020/10/20/cn/javase-net/</id>
    <published>2020-10-20T14:35:22.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>javase 里面关于网络的基础类说明(工作中基本用不到,看着图个乐就行)</p><span id="more"></span><h2 id="常用类"><a class="header-anchor" href="#常用类"></a>常用类</h2><h3 id="InetAddress"><a class="header-anchor" href="#InetAddress"></a>InetAddress</h3><p>This class represents an Internet Protocol (IP) address.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">//获取主机名/IP</span>  <span class="token class-name">InetAddress</span> localHost <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localHost<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取主机名/IP</span>  <span class="token class-name">InetAddress</span> inetAdd <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//IP</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAdd<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//主机名</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAdd<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行结果</span><span class="token comment">// losssdeMac-mini.local/192.168.1.6</span><span class="token comment">// www.baidu.com/119.63.197.139</span><span class="token comment">// 119.63.197.139</span><span class="token comment">// www.baidu.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Socket"><a class="header-anchor" href="#Socket"></a>Socket</h3><p>This class implements client sockets (also called just “sockets”). A socket is an endpoint for communication between two machines.</p><p>通过客户端和服务端的交互例子来说明常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//client</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//向Server送数据</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello server"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收Server返回</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buff<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token operator">=</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//server</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//打开Server接收数据</span>        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取服务端的套接字对象</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token operator">=</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向Clinet送数据</span>        <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello Client"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;javase 里面关于网络的基础类说明(工作中基本用不到,看着图个乐就行)&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://stdiolosss.com/categories/java/"/>
    
    
    <category term="javase" scheme="http://stdiolosss.com/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>javase-thread</title>
    <link href="http://stdiolosss.com/2020/10/18/cn/javase-thread/"/>
    <id>http://stdiolosss.com/2020/10/18/cn/javase-thread/</id>
    <published>2020-10-18T09:03:06.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>java 多线程基础</p><span id="more"></span><h2 id="基础知识-2"><a class="header-anchor" href="#基础知识-2"></a>基础知识</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 实现多线程的时候： *      1、需要继承Thread类 *      2、必须要重写run方法，指的是核心执行的逻辑 *      3、线程在启动的时候，不要直接调用run方法，而是要通过start()来进行调用 *      4、每次运行相同的代码，出来的结果可能不一样，原因在于多线程谁先抢占资源无法进行人为控制 *  第二种实现方式：使用了代理设计模式 *      1、实现Runnable接口 *      2、重写run方法 *      3、创建Thread对象，将刚刚创建好的runnable的子类实现作为thread的构造参数 *      4、通过thread.start()进行启动 *    两种实现方式哪种用的比较多 *    推荐使用第二种方式， *      1、java是单继承，将继承关系留给最需要的类 *      2、使用runnable接口之后不需要给共享变量添加static关键字，每次创建一个对象，作为共享对象即可 *   线程的生命周期： *      1、新生状态： *          当创建好当前线程对象之后，没有启动之前（调用start方法之前） *          ThreadDemo thread = new ThreadDemo() *          RunnableDemo run = new RunnableDemo() *      2、就绪状态：准备开始执行，并没有执行，表示调用start方法之后 *          当对应的线程创建完成，且调用start方法之后，所有的线程会添加到一个就绪队列中，所有的线程同时去抢占cpu的资源 *      3、运行状态：当当前进程获取到cpu资源之后，就绪队列中的所有线程会去抢占cpu的资源，谁先抢占到谁先执行，在执行的过程中就叫做运行状态 *          抢占到cpu资源，执行代码逻辑开始 *      4、死亡状态：当运行中的线程正常执行完所有的代码逻辑或者因为异常情况导致程序结束叫做死亡状态 *              进入的方式： *                  1、正常运行完成且结束 *                  2、人为中断执行，比如使用stop方法 *                  3、程序抛出未捕获的异常 *      5、阻塞状态：在程序运行过程中，发生某些异常情况，导致当前线程无法再顺利执行下去，此时会进入阻塞状态，进入阻塞状态的原因消除之后， *                  所有的阻塞队列会再次进入到就绪状态中，随机抢占cpu的资源，等待执行 *          进入的方式： *              sleep方法 *              等待io资源 *              join方法（代码中执行的逻辑） * *      注意： *          在多线程的时候，可以实现唤醒和等待的过程，但是唤醒和等待操作的对应不是thread类 *             而是我们设置的共享对象或者共享变量 *      多线程并发访问的时候回出现数据安全问题： *          解决方式： *              1、同步代码块 *                  synchronized(共享资源、共享对象，需要是object的子类)&#123;具体执行的代码块&#125; *              2、同步方法 *                  将核心的代码逻辑定义成一个方法，使用synchronized关键字进行修饰，此时不需要指定共享对象 * */</span>    <span class="token comment">//获取当前线程对象</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前线程的名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取线程的id</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取线程的优先级,在一般系统中范围是0-10的值，如果没有经过设置的话，就是默认值5，有些系统是0-100</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池的优先级</span>        <span class="token comment">/*        * 优先级越高一定越先执行吗？        *       不一定，只是优先执行的概率比较大而已        * */</span>        thread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断线程是否在活动</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Waits for this thread to die.该线程强制执行</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//睡一秒</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//暂停一次</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JUC-TODO"><a class="header-anchor" href="#JUC-TODO"></a>JUC(TODO)</h2><h3 id="阻塞队列"><a class="header-anchor" href="#阻塞队列"></a>阻塞队列</h3><p><img src="https://losssblog.oss-cn-hangzhou.aliyuncs.com/javase-thread-01.png" alt="常用的阻塞队列"><br>BlockingQueue（阻塞队列）<br>阻塞队列提供了可阻塞的入队和出对操作，如果队列满了，入队操作将阻塞直到有空间可用，如果队列空了，出队操作将阻塞直到有元素可用；</p><h4 id="BlockingQueue"><a class="header-anchor" href="#BlockingQueue"></a>BlockingQueue</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> blockingQueue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> element <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> blockingQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>element <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将要放进去的元素是："</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者在等待空闲空间的时候被打断了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者已经终止了生产过程！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//消费者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> blockingQueue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> blockingQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出来的元素是："</span> <span class="token operator">+</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者在等待新产品的时候被打断了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Producer</span> producerPut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producerPut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PriorityBlockingQueue"><a class="header-anchor" href="#PriorityBlockingQueue"></a>PriorityBlockingQueue</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">></span> task<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">&lt;</span> task<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsePriorityBlockingQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Task</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"id为3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Task</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"id为4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Task</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"id为1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器："</span> <span class="token operator">+</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器："</span> <span class="token operator">+</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Synchronousqueue"><a class="header-anchor" href="#Synchronousqueue"></a>Synchronousqueue</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueProducer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blockingQueue<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SynchronousQueueProducer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> data <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Put: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueConsumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blockingQueue<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SynchronousQueueConsumer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> data <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" take(): "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> synchronousQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronousQueueProducer</span> queueProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueueProducer</span><span class="token punctuation">(</span>                synchronousQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>queueProducer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronousQueueConsumer</span> queueConsumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueueConsumer</span><span class="token punctuation">(</span>                synchronousQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>queueConsumer1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronousQueueConsumer</span> queueConsumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueueConsumer</span><span class="token punctuation">(</span>                synchronousQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>queueConsumer2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DelayQueue"><a class="header-anchor" href="#DelayQueue"></a>DelayQueue</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayTask</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">3000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"queue put done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DelayTask</span> task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DelayTask</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> delayTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TimeUnit</span> delayTimeUnit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> executeTime<span class="token punctuation">;</span><span class="token comment">//ms</span>    <span class="token class-name">DelayTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> delayTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> delayTimeUnit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">=</span> delayTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delayTimeUnit <span class="token operator">=</span> delayTimeUnit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executeTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayTimeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Delayed</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>executeTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程池"><a class="header-anchor" href="#线程池"></a>线程池</h3><h4 id="生命周期"><a class="header-anchor" href="#生命周期"></a>生命周期</h4><ol><li>RUNNING 能接受提交的任务,并且能处理阻塞队列中的任务</li><li>SHUTDOWN 关闭状态,不再接受新的提交任务,但可以处理阻塞队列中以保存的任务</li><li>STOP 不能接受新的任务,也不处理队列中的任务,会中断正在处理任务的线程</li><li>TIDYING 如果所有的任务都终止了,wokerCount(有效线程数)为 0,线程池进入该状态后会调用 terminated()方法进入 TERMINATED 状态</li><li>TERMINATED 在 terminated()方法执行完后进入该状态,默认 terminated()方法中什么也没有做</li></ol><h4 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h4><p><img src="https://losssblog.oss-cn-hangzhou.aliyuncs.com/javase-thread-02.png" alt="线程池"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//需要一个用来多线程执行的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//CacheThreadPoolDemo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheThreadPoolDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//FixedThreadPool</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixedThreadPoolDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//ScheduledThreadPool</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledThreadPoolDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledExecutorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"延迟三秒执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledExecutorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//ScheduledThreadPool 周期执行</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1------延迟一秒执行，每三秒执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//SingleThreadPool</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleThreadPoolDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ForkJoinPool 利用的是分而治之这个思想</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ForkJoinPool 随机数相加</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForJoinPollTask</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//初始化100个数组元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//对数组元素赋值，并将数组元素的值添加到sum总和中</span>            total <span class="token operator">+=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化数组总和："</span><span class="token operator">+</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SumTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        创建一个通用池，这个是jdk1.8提供的功能</span>        <span class="token class-name">ForkJoinPool</span> pool <span class="token operator">=</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span><span class="token function">commonPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//提交分解的SumTask 任务</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程执行结果："</span><span class="token operator">+</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭线程池</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SumTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> THRESHOLD <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//每个小任务 最多只累加20个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token comment">/**     * Creates a new instance of SumTask.     * 累加从start到end的arry数组     * @param arry     * @param start     * @param end     */</span>    <span class="token keyword">public</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arry<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arry <span class="token operator">=</span> arry<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//当end与start之间的差小于threshold时，开始进行实际的累加</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;</span>THRESHOLD<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的i值："</span><span class="token operator">+</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//当end与start之间的差大于threshold，即要累加的数超过20个时候，将大任务分解成小任务</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token class-name">SumTask</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SumTask</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//并行执行两个 小任务</span>            left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//把两个小任务累加的结果合并起来</span>            <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>right<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造方法的详细说明-TODO"><a class="header-anchor" href="#构造方法的详细说明-TODO"></a>构造方法的详细说明(TODO)</h4><h4 id="拒绝策略"><a class="header-anchor" href="#拒绝策略"></a>拒绝策略</h4><h5 id="ThreadPoolExecutor-AbortPolicy"><a class="header-anchor" href="#ThreadPoolExecutor-AbortPolicy"></a>ThreadPoolExecutor.AbortPolicy</h5><p>丢弃任务并跑出 RejectedExecutionException 异常</p><h5 id="ThreadPoolExecutor-DiscardPolicy"><a class="header-anchor" href="#ThreadPoolExecutor-DiscardPolicy"></a>ThreadPoolExecutor.DiscardPolicy</h5><p>丢弃任务,但不跑出异常</p><h5 id="ThreadPoolExecutor-DiscardOldestPolicy"><a class="header-anchor" href="#ThreadPoolExecutor-DiscardOldestPolicy"></a>ThreadPoolExecutor.DiscardOldestPolicy</h5><p>丢弃队列最前面的任务,然后重新尝试执行任务(重复此过程)</p><h5 id="ThreadPoolExecutor-CallerRunsPolicy"><a class="header-anchor" href="#ThreadPoolExecutor-CallerRunsPolicy"></a>ThreadPoolExecutor.CallerRunsPolicy</h5><p>由调用线程处理该任务</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;java 多线程基础&lt;/p&gt;</summary>
    
    
    
    <category term="javase" scheme="http://stdiolosss.com/categories/javase/"/>
    
    
    <category term="java" scheme="http://stdiolosss.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>软路由备忘</title>
    <link href="http://stdiolosss.com/2020/06/06/cn/router/"/>
    <id>http://stdiolosss.com/2020/06/06/cn/router/</id>
    <published>2020-06-06T07:27:20.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>备忘</p><span id="more"></span><h2 id="端口分布"><a class="header-anchor" href="#端口分布"></a>端口分布</h2><table><thead><tr><th>端口</th><th>程序</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>ikuai</td><td>wan</td></tr><tr><td>2~4</td><td>二级路由</td><td>连其他设备</td></tr><tr><td>5</td><td>ikuai 二级路由公用 lan 口</td><td></td></tr></tbody></table><h2 id="Tips-2"><a class="header-anchor" href="#Tips-2"></a>Tips</h2><h3 id="问题集-3"><a class="header-anchor" href="#问题集-3"></a>问题集</h3><ol><li>软路由断电后重连操作</li></ol><p>因为 pve 设置开机自动启动可能导致一些小问题所以都是手动启动<br>连接软路由 1 口-&gt;手动修改 ip 为 192.168.1.x 路由写 192.168.1.1 就行-&gt; 登陆 pve 后台 192.168.1.4:8006</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;备忘&lt;/p&gt;</summary>
    
    
    
    <category term="软路由" scheme="http://stdiolosss.com/categories/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
    
    <category term="软路由" scheme="http://stdiolosss.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="http://stdiolosss.com/2020/05/10/cn/typescript/"/>
    <id>http://stdiolosss.com/2020/05/10/cn/typescript/</id>
    <published>2020-05-10T08:24:45.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 笔记</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript 笔记&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://stdiolosss.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript,前端" scheme="http://stdiolosss.com/tags/TypeScript-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>nas-ubuntu</title>
    <link href="http://stdiolosss.com/2019/09/08/cn/nas-ubuntu/"/>
    <id>http://stdiolosss.com/2019/09/08/cn/nas-ubuntu/</id>
    <published>2019-09-08T06:03:21.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>在群晖nas上安装ubuntu</p><span id="more"></span><p>最终效果 使用群晖自带的dnns实现外网ssh访问(tomcat最终没有实现外网访问具体原因还在调查中)</p><h2 id="安装ubuntu"><a class="header-anchor" href="#安装ubuntu"></a>安装ubuntu</h2><ol><li><p>下载ubuntu镜像</p></li><li><p>在群晖套件中心下载群晖VMM</p></li><li><p>VMM设置</p></li></ol><ul><li><p>下载 Guest Tool<br><img src="https://losssblog.oss-cn-hangzhou.aliyuncs.com/nas-ubuntu-1.png" alt="nas-ubuntu-1.png"></p></li><li><p>新增-&gt;选择自己刚刚下载的ubuntu镜像</p></li><li><p>完成后状态如下图<br><img src="https://losssblog.oss-cn-hangzhou.aliyuncs.com/nas-ubuntu-2.png" alt="nas-ubuntu-2.png"></p></li><li><p>虚拟机-&gt;新增这里都比较简单 按自己需要设置就行需要注意的是其他设置里面选择启动iso文件是用的ubuntu的镜像文件,下面一个选择刚刚的Guest Tool<br>如果这里有什么不明白可以参考<a href="https://www.bilibili.com/video/av25745315/">群晖的官方视频教程</a></p></li></ul><ol start="4"><li>测试ssh</li></ol><p><code>ssh 用户名@内网地址</code></p><h2 id="外网设置"><a class="header-anchor" href="#外网设置"></a>外网设置</h2><p>需要自己家网有外网ip 这部分可以参考 <a href="https://www.youtube.com/watch?v=6baVu1yLZ9Q">视频</a></p><ol><li><p>需要在路由器设置端口转发</p></li><li><p>设置群晖的DNNS</p></li><li><p>配置好后可以使用 ssh -p 22 用户名@主机域名 就可以直接连到我们在nas上的ubuntu主机了</p></li></ol><h2 id="部署tomcat"><a class="header-anchor" href="#部署tomcat"></a>部署tomcat</h2><p>参考 <a href="https://cloud.tencent.com/developer/article/1162159">这篇文章</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在群晖nas上安装ubuntu&lt;/p&gt;</summary>
    
    
    
    <category term="nas" scheme="http://stdiolosss.com/categories/nas/"/>
    
    
    <category term="nas" scheme="http://stdiolosss.com/tags/nas/"/>
    
    <category term="ubuntu" scheme="http://stdiolosss.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>wake-on-lan</title>
    <link href="http://stdiolosss.com/2019/07/14/cn/wake-on-lan/"/>
    <id>http://stdiolosss.com/2019/07/14/cn/wake-on-lan/</id>
    <published>2019-07-14T05:45:18.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>尝试使用网络唤醒 PC</p><span id="more"></span><h2 id="必要设置"><a class="header-anchor" href="#必要设置"></a>必要设置</h2><ol><li><p>进入 bios 中设置，让主板支持通过（由 PCI-E/PCI 设备唤醒）【不同主板选项的名称不一样，要注意相关字眼】的方式唤醒电源。</p></li><li><p>进入系统中，找到设备管理器，电源管理中，找到网卡设备，双击，电源管理，最好是不允许计算机关闭此设备已节约电源【当前成功的情况就是这样的设置】，如果勾选了允许关闭的话，务必要勾选【允许此设备唤醒计算机，为了更安全的话再勾选【只允许幻数据包唤醒此计算机】】<br>在另一个【高级】的选项卡中， 1. 【关机 网络唤醒】 ON 2. 【环保节能】 OFF 3. 【魔术封包唤醒】ON<br>注意:不同网卡的设置不尽相同，注意相关字眼的选项。</p></li><li><p>在路由器中设置计算机的静态 IP 地址</p></li><li><p>通过其他机器的 WAKE ON LAN 软件可以进行唤醒操作。<br>注意：通过 android 手机下载 WAKE ON LAN 也是可以的。配置好目标主机的 IP，端口号是随便写的，因为此唤醒包是唤醒计算机的，并不是只限定某一个端口。</p></li><li><p>要通过外网唤醒计算机的话，必须配置路由器的 DDNS，并且在路由器中配置虚拟服务器，将外网的一个端口绑定到目标主机的一个端口上面。<br>比如，配置虚拟服务器，将外网中来自 8100 的端口转发给目标主机（192.168.0.100）的 3389 端口，这样配置也是可以的。</p></li></ol><h2 id="参考-3"><a class="header-anchor" href="#参考-3"></a>参考</h2><p><a href="https://blog.csdn.net/xinluke/article/details/51169393">https://blog.csdn.net/xinluke/article/details/51169393</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;尝试使用网络唤醒 PC&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>wsl</title>
    <link href="http://stdiolosss.com/2019/03/30/cn/wsl/"/>
    <id>http://stdiolosss.com/2019/03/30/cn/wsl/</id>
    <published>2019-03-30T09:41:32.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Subsystem for Linux<br>通过win10 自带的 linux 提供的terminal 可以很方便地弥补cmd的不足</p><span id="more"></span><h1>安装wsl</h1><p><a href="https://www.bilibili.com/read/cv1429071/">参考这个</a><br>需要注意的是 需要win10专业版才可以 别的版本好像不行</p><h1>.hyper.js 和 .zshrc备份</h1><p><a href="https://gist.github.com/lossss/26d22641cf2464ec548527ec560101ad">备份</a></p><h1>问题集</h1><p>如果使用卡巴斯基的话需要关闭443端口的检测 不然wsl系统可能连不上网</p><p><img src="https://losssblog.oss-cn-hangzhou.aliyuncs.com/wsl/1.png?x-oss-process=style/blogimage" alt="详细设置看这里"></p><h1>参考资料</h1><p><a href="https://spencerwoo.com/dowww/2-Toolchain/2-1-TerminalEnv.html#hyper-%E7%BB%88%E7%AB%AF">Dev on Windows with WSL</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Windows Subsystem for Linux&lt;br&gt;
通过win10 自带的 linux 提供的terminal 可以很方便地弥补cmd的不足&lt;/p&gt;</summary>
    
    
    
    
    <category term="wsl,terminal" scheme="http://stdiolosss.com/tags/wsl-terminal/"/>
    
  </entry>
  
  <entry>
    <title>eclipse</title>
    <link href="http://stdiolosss.com/2019/03/07/cn/eclipse/"/>
    <id>http://stdiolosss.com/2019/03/07/cn/eclipse/</id>
    <published>2019-03-07T14:10:41.000Z</published>
    <updated>2024-10-15T12:11:30.361Z</updated>
    
    <content type="html"><![CDATA[<p>eclipse 常见配置和快捷键</p><span id="more"></span><h1>配置</h1><h2 id="设置tab为空格"><a class="header-anchor" href="#设置tab为空格"></a>设置tab为空格</h2><ol><li>Click Window » Preferences</li><li>Expand Java » Code Style</li><li>Click Formatter</li><li>Click the Edit button</li><li>Click the Indentation tab</li><li>Under General Settings, set Tab policy to: Spaces only</li><li>Click OK ad nauseam to apply the changes.</li></ol><h2 id="设置显示空格"><a class="header-anchor" href="#设置显示空格"></a>设置显示空格</h2><p>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Show whitespace characters</p><h2 id="安装vim"><a class="header-anchor" href="#安装vim"></a>安装vim</h2><p>google 搜vrapper 或者<a href="https://sourceforge.net/projects/vrapper/files/latest/download?source=files">点此下载</a></p><h1>快捷键</h1><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>ctrl+h</td><td>全局搜索</td></tr><tr><td>ctrl + 1</td><td>quick fix</td></tr><tr><td>ctrl + shift + r</td><td>打开资源</td></tr><tr><td>ctrl + shift + f</td><td>formatting</td></tr><tr><td>ctrl+o</td><td>预览类里面的所有方法和属性</td></tr><tr><td>ctrl+e</td><td>在已打开文件中切换</td></tr><tr><td>shift+enter</td><td>在当前行之下创建一个空白行</td></tr><tr><td>ctrl+shift+o</td><td>清除不需要引用的包</td></tr><tr><td>ctrl+l</td><td>跳转到指定行</td></tr><tr><td>ctrl+t</td><td>查看继承结构</td></tr><tr><td>alt+↑</td><td>上移本行代码</td></tr><tr><td>ctrl+alt+h</td><td>查看方法被调用的具体位置</td></tr></tbody></table><h1>自动补全</h1><p>コンテンツ　アシスト java自动提示处恢复默认的.</p><h1>参考</h1><p><a href="https://dzone.com/articles/top-30-eclipse-keyboard-shortcuts-for-java-program-1">30 Useful Eclipse Keyboard Shortcuts for Java Programmers</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;eclipse 常见配置和快捷键&lt;/p&gt;</summary>
    
    
    
    <category term="ide" scheme="http://stdiolosss.com/categories/ide/"/>
    
    
    <category term="eclipse,ide" scheme="http://stdiolosss.com/tags/eclipse-ide/"/>
    
  </entry>
  
  <entry>
    <title>java</title>
    <link href="http://stdiolosss.com/2019/02/25/cn/javase/"/>
    <id>http://stdiolosss.com/2019/02/25/cn/javase/</id>
    <published>2019-02-25T03:33:13.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>个人 javase 知识点杂谈,全写一起有点长,内容太多的我会单开文章说明</p><span id="more"></span><h2 id="DOS-知识"><a class="header-anchor" href="#DOS-知识"></a>DOS 知识</h2><table><thead><tr><th>操作</th><th>操作</th></tr></thead><tbody><tr><td>cd</td><td>打开目录</td></tr><tr><td>dir</td><td>ls</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>tab</td><td>自动补齐</td></tr></tbody></table><h2 id="数据类型-3"><a class="header-anchor" href="#数据类型-3"></a>数据类型</h2><h3 id="整型"><a class="header-anchor" href="#整型"></a>整型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">015</span><span class="token punctuation">;</span><span class="token comment">//八进制</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">;</span><span class="token comment">//16进制</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0b1101</span><span class="token punctuation">;</span><span class="token comment">// 二进制</span><span class="token keyword">byte</span> e <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token comment">//一个字节存储 -128~127</span><span class="token keyword">short</span> <span class="token comment">//两个字节存储 -32768~32767</span><span class="token keyword">int</span> <span class="token comment">//四个字节存储</span><span class="token keyword">long</span> <span class="token comment">//八个字节存储</span><span class="token keyword">long</span> globalPopulation <span class="token operator">=</span> <span class="token number">74000000000L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点型"><a class="header-anchor" href="#浮点型"></a>浮点型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.14F</span><span class="token punctuation">;</span><span class="token comment">//四个字节 精度小数点后7位</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">6.26</span><span class="token punctuation">;</span><span class="token comment">//八个字节 精度是float两倍</span><span class="token comment">//浮点类型默认double</span><span class="token comment">// 浮点型比较不精确 如果需要比较需要使用 BigDecimal类</span><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">0.1F</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// output false</span><span class="token class-name">BigDecimal</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tips-3"><a class="header-anchor" href="#Tips-3"></a>Tips</h3><h4 id="基本数据类型转换"><a class="header-anchor" href="#基本数据类型转换"></a>基本数据类型转换</h4><ol><li></li></ol><h4 id="原码补码反码"><a class="header-anchor" href="#原码补码反码"></a>原码补码反码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">原码 <span class="token number">00000001</span> <span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span>    <span class="token number">10000001</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span>补码 反码<span class="token operator">+</span><span class="token number">1</span>反码 负数保留符号位其他位取反<span class="token number">0000</span> <span class="token number">0110</span> <span class="token operator">=</span><span class="token operator">></span><span class="token number">6</span><span class="token number">1111</span> <span class="token number">1001</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符型"><a class="header-anchor" href="#字符型"></a>字符型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> a <span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span> <span class="token comment">//两个字节 运算时可以当做整型处理</span><span class="token keyword">char</span> b <span class="token operator">=</span><span class="token char">'\t'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数组"><a class="header-anchor" href="#数组"></a>数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//拷贝方法</span><span class="token comment">/** * @param      src      the source array. * @param      srcPos   starting position in the source array. * @param      dest     the destination array. * @param      destPos  starting position in the destination data. * @param      length   the number of array elements to be copied.*/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> srcPos<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> destPos<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h2><ol><li>普通代码块:定义在方法中，使用{}括起来的代码叫做普通代码块</li><li>构造代码块：定义在类中的使用{}括起来的代码叫做构造代码块<br>注意：每次代码运行的时候回将构造代码块中的代码添加到构造方法的前面<br>构造代码块中的代码会添加到每一个构造方法中，当使用 this(参数)的时候不会添加</li><li>静态代码块：使用 static{}括起来的代码叫做静态代码块，在程序载入的时候优先执行<br>数据库连接等其他提前需要准备好的代码会放在 static 代码块</li><li>同步代码块：<br>在多线程的时候回使用，用来给共享空间进行加锁操作（后面讲）</li><li>执行顺序：静态代码块–》构造代码块（创建对象的时候才会用到）–》普通代码块</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CodeBlockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CodeBlockDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CodeBlockDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//public CodeBlockDemo(int a)</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我应该是什么分类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CodeBlockDemo</span> codeBlockDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeBlockDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        codeBlockDemo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a class="header-anchor" href="#接口"></a>接口</h2><p>接口 has A<br>抽象类 is A</p><h3 id="抽象类和接口区别"><a class="header-anchor" href="#抽象类和接口区别"></a>抽象类和接口区别</h3><p>1、抽象类中的方法可以有抽象方法，也可以有普通方法，但是接口中只能包含抽象方法<br>2、抽象类需要使用 abstract 关键字来修饰，而接受使用 interface 关键字来修饰<br>3、子类使用 extends 关键字来继承抽象类，使用 implements 来实现接口<br>4、子类继承抽象类的时候必须要实现所有的抽象方法，普通方法可以不重写，而接口中的所有方法必须实现<br>5、抽象类中可以定义成员变量，而接口中只能定义静态常量<br>6、抽象类在子类实现的时候是单继承，而接口时多继承<br>7、抽象类和接口都不能实例化，但是抽象类中可以有构造方法，而接口中不能有构造方法<br>8、抽象类中可以实现接口，并且不实现接口中方法，而接口只能继承接口，不能实现接口</p><h2 id="内部类"><a class="header-anchor" href="#内部类"></a>内部类</h2><p>内部类（当作类中的一个普通成员变量，只不过此成员变量是 class 的类型）：<br>一个 java 文件中可以包含多个 class，但是只能有一个 public class<br>如果一个类定义在另一个类的内部，此时可以称之为内部类</p><ol><li><p>使用：<br>创建内部类的时候，跟之前的方法不一样，需要在内部类的前面添加外部类来进行修饰<br>InnerClassDemo.InnerClass inner = new InnerClassDemo().new InnerClass();</p></li><li><p>特点：<br>1、内部类可以方便的访问外部类的私有属性<br>2、外部类不能访问内部类的私有属性,但是如果创建了内部类的对象，此时可以在外部类中访问私有属性<br>3、内部类中不能定义静态属性<br>4、当内部类和外部类具有相同的私有属性的时候，在内部类中访问的时候，可以直接访问内部类的属性，<br>5、如果需要访问外部类的属性，那么需要添加 外部类类名.this.属性。</p></li><li><p>分类：<br>匿名内部类：当定义了一个类，实现了某个接口的时候，在使用过程中只需要使用一次，没有其他用途<br>其实考虑到代码编写的简洁，可以考虑不创建具体的类，而采用 new interface(){添加未实现的方法}<br>就叫做匿名内部类<br>静态内部类：在内部类中可以定义静态内部类，使用 static 关键字进行修饰，使用规则<br>外部类.内部类 类的引用名称 = new 外部类.内部类（）；<br>方法内部类：在外部类的方法中也可以定义类，此时叫做方法内部类（了解即可）<br>使用的时候需要注意，只能在方法中创建对象，因为此 class 的作用域就是当前方法</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Face</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Face</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Face<span class="token punctuation">.</span>Nose</span> n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Nose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Face<span class="token punctuation">.</span>Ear</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Face<span class="token punctuation">.</span>Ear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Face</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token class-name">String</span> shape <span class="token operator">=</span> <span class="token string">"瓜子脸"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token string">"红润"</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Nose</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Face</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呼吸！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Ear</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在听！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//匿名内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoNameInnerClassDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有一万行代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有一万行代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        InnerClass innerClass = new StaticClass().new InnerClass();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//方法内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodInnerClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MethodInnerClass</span>  methodInnerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodInnerClass<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常"><a class="header-anchor" href="#异常"></a>异常</h2><p>父类 Throwable<br>子类 Error Exception</p><h2 id="包装类"><a class="header-anchor" href="#包装类"></a>包装类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -128~127有缓存</span><span class="token comment">//String</span><span class="token comment">//常量池在1.7之后放置在了堆空间里面</span><span class="token comment">//比较</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>string str1 <span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>str2<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果常量池有对应的对象 则会返回对应地址</span>str1<span class="token operator">==</span>str2<span class="token comment">//true</span><span class="token class-name">String</span> a <span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">+</span><span class="token string">"b"</span><span class="token punctuation">;</span><span class="token comment">//一个对象</span><span class="token class-name">String</span> b <span class="token operator">=</span>str1<span class="token operator">+</span>str2<span class="token punctuation">;</span><span class="token comment">//三个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用类-2"><a class="header-anchor" href="#常用类-2"></a>常用类</h2><h3 id="字符串相关"><a class="header-anchor" href="#字符串相关"></a>字符串相关</h3><p>StringBuffer 线程安全 效率低<br>StringBuilder 线程不安全 效率高</p><h3 id="日期处理相关"><a class="header-anchor" href="#日期处理相关"></a>日期处理相关</h3><p>Date<br>DateFormat<br>SimpleDateFormat</p><ol><li>parse</li><li>format</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DateFormat</span> dateFormat <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定时间</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Math"><a class="header-anchor" href="#Math"></a>Math</h3><h3 id="枚举类"><a class="header-anchor" href="#枚举类"></a>枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EventEnum</span> <span class="token punctuation">&#123;</span>    <span class="token function">LAUNCH</span><span class="token punctuation">(</span><span class="token string">"launch"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PAGEVIEW</span><span class="token punctuation">(</span><span class="token string">"pageview"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EVENT</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EventEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EventEnum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ee <span class="token operator">=</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ee<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnum</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EventEnum</span> ee <span class="token operator">=</span><span class="token class-name">EventEnum</span><span class="token punctuation">.</span>LAUNCH<span class="token punctuation">;</span>        ee<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">EventEnum</span><span class="token punctuation">.</span>PAGEVIEW<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合"><a class="header-anchor" href="#集合"></a>集合</h2><p><img src="https://losssblog.oss-cn-hangzhou.aliyuncs.com/javase-01.png" alt="javase-01"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** java集合框架：*   Collection：存放的是单一值*       特点：*           1、可以存放不同类型的数据，而数组只能存放固定类型的数据*           2、当使用arraylist子类实现的时候，初始化的长度是10，当长度不够的时候会自动进行扩容操作*       api方法：*           增加数据的方法*           add：要求必须传入的参数是Object对象，因此当写入基本数据类型的时候，包含了自动拆箱和自动装箱的过程*           addAll:添加另一个集合的元素到此集合中**           删除数据的方法*           clear:只是清空集合中的元素，但是此集合对象并没有被回收*           remove:删除指定元素*           removeAll：删除集合元素**           查询数据的方法*           contains:判断集合中是否包含指定的元素值*           containsAll:判断此集合中是否包含另一个集合*           isEmpty:判断集合是否等于空*           retainAll:若集合中拥有另一个集合的所有元素，返回true，否则返回false*           size:返回当前集合的大小**           //集合转数组的操作*           toArray:将集合转换成数组* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List"><a class="header-anchor" href="#List"></a>List</h3><p>ArraryList<br>优点:方便查询<br>缺点:增删效率低<br>LinkedList<br>优点:增删快<br>缺点:遍历和随机查找效率低</p><p>Vector<br>1、Vector 也是 List 接口的一个子类实现<br>2、Vector 跟 ArrayList 一样，底层都是使用数组进行实现的<br>3、面试经常问区别：<br>（1）ArrayList 是线程不安全的，效率高，Vector 是线程安全的效率低<br>（2）ArrayList 在进行扩容的时候，是扩容 1.5 倍，Vector 扩容的时候扩容原来的 2 倍(具体可以看源码的 grow 方法)</p><h3 id="Iterator"><a class="header-anchor" href="#Iterator"></a>Iterator</h3><p>在 java 代码中包含三种循环的方式<br>do…while<br>while<br>for<br>还有一种增强 for 循环的方式，可以简化循环的编写</p><p>所有的集合类都默认实现了 Iterable 的接口，实现此接口意味着具备了增强 for 循环的能力，也就是 for-each<br>增强 for 循环本质上使用的也是 iterator 的功能<br>方法：<br>iterator()<br>foreach()<br>在 iterator 的方法中，要求返回一个 Iterator 的接口子类实例对象<br>此接口中包含了<br>hasNext()<br>next()</p><p>在使用 iterator 进行迭代的过程中如果删除其中的某个元素会报错，并发操作异常，因此<br>如果遍历的同时需要修改元素，建议使用 listIterator（），<br>ListIterator 迭代器提供了向前和向后两种遍历的方式<br>始终是通过 cursor 和 lastret 的指针来获取元素值及向下的遍历索引<br>当使用向前遍历的时候必须要保证指针在迭代器的结果，否则无法获取结果值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ArrayList 内部关于Iterator的具体实现</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set"><a class="header-anchor" href="#Set"></a>Set</h3><p>唯一无序</p><ol><li>TreeSet<br>底层是红黑树<br>默认有排序操作,如果是基本数据类型,自动比较如果是引用类型,需要自定义比较器<ul><li>比较器分类:<br>内部比较器:定义在元素的类种,继承 Comparable 接口<br>外部比较器:定义在外部类中,通过实现 Comparator 接口实现,但是要将该比较器传递到集合中(TreeSet treeSet = new TreeSet(new Compare()))</li><li>区别:<br>外部比较器可以定义成工具类用于复用,而内部比较器只能用于当前类(因为是使用外部构造器的构造方法生成的)<br>如果两者同时存在,则使用外部比较器</li><li>当使用比较器的时候不会调用 equals 方法</li></ul></li><li>HashSet<br>需要重写 hashCode 和 equals 方法</li></ol><h3 id="泛型"><a class="header-anchor" href="#泛型"></a>泛型</h3><p>保证集合内数据类型统一<br>优点:</p><ol><li>数据安全</li><li>获取数据时效率比较高</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>泛型的高阶应用:</p><h4 id="泛型类"><a class="header-anchor" href="#泛型类"></a>泛型类</h4><p>常见的 ArrayList&lt;E&gt; 就是泛型类 当然也可以自己定义</p><h4 id="泛型接口"><a class="header-anchor" href="#泛型接口"></a>泛型接口</h4><ul><li></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//泛型接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FanXingInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">B</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//子类1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanXingInterfaceSub</span> <span class="token keyword">implements</span> <span class="token class-name">FanXingInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试方法 类型由子类决定 随意改变会报错</span> <span class="token class-name">FanXingInterfaceSub</span> fxi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FanXingInterfaceSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//子类2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanXingInterfaceSub</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">FanXingInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试方法 类型由测试方法决定</span> <span class="token class-name">FanXingInterfaceSub</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fxi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FanXingInterfaceSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="泛型方法"><a class="header-anchor" href="#泛型方法"></a>泛型方法</h4><p>在定义方法的时候，指定方法的返回值和参数是自定义的占位符，可以是类名中的 T,也可以是自定义的 Q，只不过在使用 Q 的时候需要使用&lt;Q&gt;定义在返回值的前面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Q</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Q</span> q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="泛型的上限"><a class="header-anchor" href="#泛型的上限"></a>泛型的上限</h4><p>如果父类确定了，所有的子类都可以直接使用</p><h4 id="泛型的下限"><a class="header-anchor" href="#泛型的下限"></a>泛型的下限</h4><p>如果子类确定了，子类的所有父类都可以直接传递参数使用</p><h3 id="Map"><a class="header-anchor" href="#Map"></a>Map</h3><h4 id="HashMap"><a class="header-anchor" href="#HashMap"></a>HashMap</h4><ul><li>key 无序唯一</li><li>value 无序不唯一</li></ul><h4 id="LinkedHashMap"><a class="header-anchor" href="#LinkedHashMap"></a>LinkedHashMap</h4><ul><li>有序的 HashMap 速度快</li></ul><h4 id="TreeMap"><a class="header-anchor" href="#TreeMap"></a>TreeMap</h4><ul><li>有序 速度没有 hash 快</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * map存储的是k-v键值对映射的数据 *      实现子类： *          HashMap：数据+链表（1.7） 数组+链表+红黑树（1.8） *          LinkedHashMap：链表 *          TreeMap:红黑树 * *      基本api操作： *          增加： *              put（k,v）    添加元素 *          查找： *              isEmpty      判断是否为空 *              size        返回map的大小 *              containsKey *              containsValue *              get *          删除： *              clear 清空集合中的所有元素 *              remove:删除指定元素 *     Map.entry:表示的是K-V组合的一组映射关系，key和value成组出现 * *     hashmap跟hashtable的区别： *      1、hashmap线程不安全，效率比较高，hashtable线程安全，效率低 *      2、hashmap中key和value都可以为空,hashtable不允许为空 * * *      hashmap初始值为2的N次幂， *          1、方便进行&amp;操作，提高效率，&amp;要比取模运算效率要高 *              hash &amp; (initCapacity-1) *          2、在扩容之后涉及到元素的迁移过程，迁移的时候只需要判断二进制的前一位是0或者是1即可 *              如果是0，表示新数组和就数组的下标位置不变，如果是1，只需要将索引位置加上旧的数组的长度值即为新数组的下标 *      1.7源码知识点：  数组+链表 *          1、默认初始容量 *          2、加载因子 *          3、put操作 *              1、设置值，计算hash *              2、扩容操作 *              3、数据迁移的过程 *      1.8源码知识点:   数组+链表+红黑树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        map.clear();</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历操作</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>keys<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//只能获取对应的value值，不能根据value来获取key</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>values<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//迭代器</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> keys2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Map.entry</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator1 <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Collections"><a class="header-anchor" href="#Collections"></a>Collections</h3><p>Collection 不同 Collections 是工具类</p><p>addAll<br>sort<br>binarySearch//二分查找的时候需要先进行排序操作，如果没有排序的话，是找不到指定元素的<br>fill//替换<br>shuffle<br>reverse</p><h3 id="Arrays"><a class="header-anchor" href="#Arrays"></a>Arrays</h3><p>Collections 相同</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//asList demo</span><span class="token comment">//  int[] array = new int[]&#123;1,2,3,4,5&#125;;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ints <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//list转换成数组</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> ints<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接用用数组转换</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器的一些面试题"><a class="header-anchor" href="#容器的一些面试题"></a>容器的一些面试题</h3><p>1.Collection 和 Collections 的联系和区别<br>Collection 集接口,Collections 是工具类静态方法来对集合进操作</p><p>2.ArrayList 和 LinkedList 的联系和区别<br>ArrayList 连续遍历元素和随机访问元素较高<br>LinkedList 才用列表 插入删除元素较高</p><p>3.Vector 和 ArrayList 的联系和区别<br>Vector 线程安全 ArrayList 线程不安全<br>增加长度时 Vector 默认增长一倍,ArrayList 增长 0.5 倍</p><p>4.HashMap 和 HashTable 的联系和区别<br>HashMap 线程不安全 HashTable 线程安全<br>HashMap 允许 null HashTable 不允许 null</p><h2 id="IO"><a class="header-anchor" href="#IO"></a>IO</h2><h3 id="File-类的常用方法"><a class="header-anchor" href="#File-类的常用方法"></a>File 类的常用方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建文件</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断文件的属性，都会返回boolean类型的值</span>        file<span class="token punctuation">.</span><span class="token function">canExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断当前文件是否存在</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取文件的名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取文件的绝对路径</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取文件的父路径名称，如果文件的路径中只包含文件名称，则显示空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回文件绝对路径的规范格式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回操作系统的文件分割符</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//无论当前文件是否存在，只要给定具体的路径，都可以返回相应的路径名称</span>        <span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:/a/b/c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件是否是文件或者目录</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String[] list = file2.list();</span><span class="token comment">// for(String str:list)&#123;</span><span class="token comment">// System.out.println(list.toString());</span><span class="token comment">// &#125;</span><span class="token comment">// System.out.println("---------------");</span><span class="token comment">// File[] files = file2.listFiles();</span><span class="token comment">// for(File f : files)&#123;</span><span class="token comment">// System.out.println(f);</span><span class="token comment">// &#125;</span>        <span class="token comment">//打印当前文件系统的所有盘符</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files1 <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">listRoots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>files1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>files1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建单级目录</span>        file2<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建多级目录</span>        file2<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IO-流"><a class="header-anchor" href="#IO-流"></a>IO 流</h3><p>字节流<br>InputStream,OutpuStream<br>字符流<br>Reader,Writer</p><h4 id="InputStream-抽象类"><a class="header-anchor" href="#InputStream-抽象类"></a>InputStream(抽象类)</h4><p>以子类 FileInputStream 为例说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 注意：当编写io流的程序的时候一定要注意关闭流 *      步骤; *          1、选择合适的io流对象 *          2、创建对象 *          3、传输数据 *          4、关闭流对象（占用系统资源） */</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.单个读取</span>    <span class="token keyword">int</span> read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.添加缓冲区的方式进行读取，每次会将数据添加到缓冲区中，当缓冲区满了之后，一次 读取，而不是每一个字节进行读取</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3.缓冲数组+限定长度</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// read(byte[] b, int off, int len)</span>    <span class="token comment">//b - the buffer into which the data is read.</span>    <span class="token comment">// off - the start offset in array b at which the data is written.</span>    <span class="token comment">// len - the maximum number of bytes to read.</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="OutputStream-抽象类"><a class="header-anchor" href="#OutputStream-抽象类"></a>OutputStream(抽象类)</h4><p>以子类 FileOutputStream 为例说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"aaa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\nabc"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Reader-抽象类"><a class="header-anchor" href="#Reader-抽象类"></a>Reader(抽象类)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FileReader</span>  <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> read <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//bufferReader</span>        <span class="token class-name">BufferedReader</span>  reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"aaa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> read <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Writer-抽象类"><a class="header-anchor" href="#Writer-抽象类"></a>Writer(抽象类)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 什么时候需要加flush,什么时候不加flush*      最保险的方式，在输出流关闭之前每次都flush一下，然后再关闭*      当某一个输出流对象中带有缓冲区的时候，就需要进行flush，不建议大家去记住每个输出流的分类*/</span><span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    fileWriter <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fileWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"mashibing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"马士兵教育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        fileWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字节流字符流转换"><a class="header-anchor" href="#字节流字符流转换"></a>字节流字符流转换</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字节流转字符流</span><span class="token comment">//InputStreamReader</span>fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OutputStreamWriter</span>outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">,</span><span class="token string">"iso8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符流转字节流</span><span class="token comment">//没 如果是字符文件的话直接用字符流读就行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RandomAccessFile"><a class="header-anchor" href="#RandomAccessFile"></a>RandomAccessFile</h4><p>RandomAccessFile 是随机访问文件(包括读/写)的类。它支持对文件随机访问的读取和写入，即我们可以从指定的位置读取/写入文件数据。<br>需要注意的是，RandomAccessFile 虽然属于 <a href="http://java.io">java.io</a> 包，但它不是 InputStream 或者 OutputStream 的子类；它也不同于 FileInputStream 和 FileOutputStream。 FileInputStream 只能对文件进行读操作，而 FileOutputStream 只能对文件进行写操作；但是，RandomAccessFile 同时支持文件的读和写，并且它支持随机访问。<br>下面是一个分块读取大文件的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"doc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//整个文件的大小</span>        <span class="token keyword">long</span> length <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//规定块的大小</span>        <span class="token keyword">int</span> blockSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token comment">//文件可以被切分成多少个块</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>length<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span>blockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要被切成《%d》个块"</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> beginPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> actualSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>blockSize<span class="token operator">></span>length<span class="token operator">?</span>length<span class="token operator">:</span>blockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//每次读取块的时候的起始偏移量</span>            beginPos <span class="token operator">=</span> i<span class="token operator">*</span>blockSize<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                actualSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                actualSize <span class="token operator">=</span> blockSize<span class="token punctuation">;</span>                length <span class="token operator">-=</span>actualSize<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"---》起始位置是："</span><span class="token operator">+</span>beginPos<span class="token operator">+</span><span class="token string">"---->读取的大小是："</span><span class="token operator">+</span>actualSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">readSplit</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>beginPos<span class="token punctuation">,</span>actualSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readSplit</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> beginPos<span class="token punctuation">,</span><span class="token keyword">int</span> actualSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RandomAccessFile</span> randomAccessFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"doc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//表示从哪个偏移量开始读取数据</span>            randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>actualSize<span class="token operator">></span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    actualSize<span class="token operator">-=</span>length<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>actualSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多线程"><a class="header-anchor" href="#多线程"></a>多线程</h2><p>参考这篇博客 <a href="#">Post not found: javase-thread</a></p><h2 id="网络"><a class="header-anchor" href="#网络"></a>网络</h2><p>参考这篇博客 <a href="#">Post not found: javase-net</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;个人 javase 知识点杂谈,全写一起有点长,内容太多的我会单开文章说明&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://stdiolosss.com/categories/java/"/>
    
    
    <category term="java" scheme="http://stdiolosss.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="http://stdiolosss.com/2019/02/23/cn/sql/"/>
    <id>http://stdiolosss.com/2019/02/23/cn/sql/</id>
    <published>2019-02-22T18:56:56.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>必要的sql 备注</p><span id="more"></span><h2 id="oracle"><a class="header-anchor" href="#oracle"></a>oracle</h2><h3 id="查询表结构"><a class="header-anchor" href="#查询表结构"></a>查询表结构</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> tablename<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打开编辑窗口-编辑完后-执行"><a class="header-anchor" href="#打开编辑窗口-编辑完后-执行"></a>打开编辑窗口 编辑完后/执行</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="连接字符串"><a class="header-anchor" href="#连接字符串"></a>|| 连接字符串</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token operator">||</span><span class="token string">'`s job is '</span><span class="token operator">||</span>job_id <span class="token keyword">from</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不等于"><a class="header-anchor" href="#不等于"></a>&lt;&gt; 不等于</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> job_id <span class="token operator">&lt;></span> <span class="token string">'IT_PROG'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="去重-distinct"><a class="header-anchor" href="#去重-distinct"></a>去重 distinct</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> job_id <span class="token keyword">from</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="where"><a class="header-anchor" href="#where"></a>where</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> department_id <span class="token operator">=</span> <span class="token number">90</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="范围"><a class="header-anchor" href="#范围"></a>范围</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees <span class="token keyword">where</span> salary<span class="token operator">>=</span><span class="token number">4000</span> <span class="token operator">and</span> salary<span class="token operator">&lt;=</span><span class="token number">7000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="in"><a class="header-anchor" href="#in"></a>in</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> department_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="between-包含边界"><a class="header-anchor" href="#between-包含边界"></a>between 包含边界</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> salary <span class="token operator">between</span> <span class="token number">3000</span> <span class="token operator">and</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="like"><a class="header-anchor" href="#like"></a>like</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'%a%'</span> <span class="token comment">-- 名字中含有a</span><span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'%a'</span> <span class="token comment">-- 以a结尾</span><span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'_a%'</span> <span class="token comment">-- 第二个字符是a</span><span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'#_%'</span> <span class="token keyword">escape</span> <span class="token string">'#'</span> <span class="token comment">-- 名字中带有_</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="is-null"><a class="header-anchor" href="#is-null"></a>is null</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> commission_pct <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="order-by"><a class="header-anchor" href="#order-by"></a>order by</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> department_id <span class="token operator">=</span><span class="token number">80</span><span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token punctuation">,</span>last_name <span class="token keyword">asc</span> <span class="token comment">-- 多层排序</span><span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">asc</span><span class="token comment">--按照别名排序</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span> <span class="token number">12</span><span class="token operator">*</span>salary annual_sal<span class="token keyword">from</span> employees<span class="token keyword">order</span> <span class="token keyword">by</span> annual_sal <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a class="header-anchor" href="#函数"></a>函数</h3><h4 id="单行函数"><a class="header-anchor" href="#单行函数"></a>单行函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees<span class="token keyword">where</span> upper<span class="token punctuation">(</span>last_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'KING'</span><span class="token keyword">where</span> lower<span class="token punctuation">(</span>last_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'king'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符控制函数"><a class="header-anchor" href="#字符控制函数"></a>字符控制函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'HelloWorld'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token comment">-- 第一位下标1 截取5个数</span><span class="token keyword">select</span> LENGTH<span class="token punctuation">(</span><span class="token string">'HelloWorld'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> INSTR<span class="token punctuation">(</span><span class="token string">'HelloWorld'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> LPAD<span class="token punctuation">(</span>salary<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> RPAD<span class="token punctuation">(</span>salary<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> TRIM<span class="token punctuation">(</span><span class="token string">'H'</span> <span class="token keyword">FROM</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span>‘abcd’<span class="token punctuation">,</span>’b’<span class="token punctuation">,</span>’m’<span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token comment">-- 替换所有匹配到的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数字函数"><a class="header-anchor" href="#数字函数"></a>数字函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">45.926</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token comment">-- 四舍五入</span><span class="token keyword">select</span> TRUNC<span class="token punctuation">(</span><span class="token number">45.926</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token comment">-- 截断</span><span class="token keyword">select</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token comment">-- 求余数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日期函数"><a class="header-anchor" href="#日期函数"></a>日期函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 日期相减 表示相差天数</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>trunc<span class="token punctuation">(</span>sysdate<span class="token operator">-</span>hire_date<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token comment">-- 两个日期相差的月数</span>MONTHS_BETWEEN<span class="token comment">-- 向指定日期中加上若干月数</span>ADD_MONTHS<span class="token comment">-- 指定日期的下一个星期 * 对应的日期</span>NEXT_DAY<span class="token comment">-- 本月的最后一天</span>LAST_DAY<span class="token comment">-- 日期四舍五入</span><span class="token function">ROUND</span><span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span><span class="token string">'MONTH'</span><span class="token punctuation">)</span><span class="token comment">-- 日期截断</span>TRUNC<span class="token punctuation">(</span>SYSDATE <span class="token punctuation">,</span><span class="token string">'MONTH'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>yyyy</td><td>年</td></tr><tr><td>mm</td><td>月</td></tr><tr><td>dd</td><td>日</td></tr><tr><td>day</td><td>星期</td></tr><tr><td>hh</td><td>小时</td></tr><tr><td>mi</td><td>分钟</td></tr><tr><td>ss</td><td>秒</td></tr></tbody></table><h3 id="转换函数"><a class="header-anchor" href="#转换函数"></a>转换函数</h3><h4 id="to-char"><a class="header-anchor" href="#to-char"></a>to_char</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span>hire_date<span class="token keyword">from</span> employees<span class="token keyword">where</span> to_char<span class="token punctuation">(</span>hire_date<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'1994-06-07'</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">12345678.9</span><span class="token punctuation">,</span> <span class="token string">'999,999,999.99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token comment">-- 12,345,678.90</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">12345678.9</span><span class="token punctuation">,</span> <span class="token string">'000,999,999.99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token comment">--  012,345,678.90</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">12345678.9</span><span class="token punctuation">,</span> <span class="token string">'$000,999,999.99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">12345678.9</span><span class="token punctuation">,</span> <span class="token string">'L000,999,999.99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token comment">-- 当地货币符号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="to-number"><a class="header-anchor" href="#to-number"></a>to_number</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> to_number<span class="token punctuation">(</span><span class="token string">'￥012,345,678.90'</span><span class="token punctuation">,</span><span class="token string">'L000,999,999.99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="to-date"><a class="header-anchor" href="#to-date"></a>to_date</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees<span class="token keyword">where</span> hire_date <span class="token operator">=</span> to_date<span class="token punctuation">(</span><span class="token string">'1994-06-07'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通用函数"><a class="header-anchor" href="#通用函数"></a>通用函数</h3><h4 id="nvl"><a class="header-anchor" href="#nvl"></a>nvl</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 为空则用0代替</span><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>salary<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>nvl<span class="token punctuation">(</span>commission_pct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="nvl2"><a class="header-anchor" href="#nvl2"></a>nvl2</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 不为空+0.015 为空则返回0.01</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>commission_pct<span class="token punctuation">,</span>nvl2<span class="token punctuation">(</span>commission_pct<span class="token punctuation">,</span>commission_pct<span class="token operator">+</span><span class="token number">0.015</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token keyword">from</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="case"><a class="header-anchor" href="#case"></a>case</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_id<span class="token punctuation">,</span><span class="token keyword">case</span> department_id <span class="token keyword">when</span> <span class="token number">10</span> <span class="token keyword">then</span> salary<span class="token operator">*</span><span class="token number">1.1</span>                                                              <span class="token keyword">when</span> <span class="token number">20</span> <span class="token keyword">then</span> salary<span class="token operator">*</span><span class="token number">1.2</span>                                                              <span class="token keyword">else</span> salary<span class="token operator">*</span><span class="token number">1.3</span>end new_sal<span class="token keyword">from</span> employees<span class="token keyword">where</span> department_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="decode"><a class="header-anchor" href="#decode"></a>decode</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_id<span class="token punctuation">,</span>decode<span class="token punctuation">(</span>department_id<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>salary<span class="token operator">*</span><span class="token number">1.1</span><span class="token punctuation">,</span>                                                                <span class="token number">20</span><span class="token punctuation">,</span>salary<span class="token operator">*</span><span class="token number">1.2</span><span class="token punctuation">,</span>                                                                salary<span class="token punctuation">)</span> new_sal<span class="token keyword">from</span> employees<span class="token keyword">where</span> department_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询"><a class="header-anchor" href="#多表查询"></a>多表查询</h3><h4 id="内连接"><a class="header-anchor" href="#内连接"></a>内连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 等值连接</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>department_name<span class="token keyword">from</span> employees e<span class="token punctuation">,</span>departments d<span class="token keyword">where</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token comment">-- 非等值连接</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>j<span class="token punctuation">.</span>grade_level<span class="token keyword">from</span> employees e<span class="token punctuation">,</span>job_grades j<span class="token keyword">where</span> e<span class="token punctuation">.</span>salary <span class="token operator">between</span> j<span class="token punctuation">.</span>lowest_sal <span class="token operator">and</span> j<span class="token punctuation">.</span>highest_sal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外连接"><a class="header-anchor" href="#外连接"></a>外连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 左外连接</span><span class="token comment">-- 有些员工没有部门</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>department_name<span class="token keyword">from</span> employees e<span class="token punctuation">,</span>departments d<span class="token keyword">where</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>department_name<span class="token keyword">from</span> employees e<span class="token keyword">join</span> departments d<span class="token keyword">on</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token comment">-- left join</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>department_name<span class="token keyword">from</span> employees e<span class="token keyword">left</span> <span class="token keyword">join</span> departments d<span class="token keyword">on</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token comment">-- right join</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>department_name<span class="token keyword">from</span> employees e<span class="token keyword">right</span> <span class="token keyword">join</span> departments d<span class="token keyword">on</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_idhello<span class="token comment">-- full join</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>department_name<span class="token keyword">from</span> employees e<span class="token keyword">full</span> <span class="token keyword">join</span> departments d<span class="token keyword">on</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token comment">-- 自连接</span><span class="token keyword">select</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span>manager<span class="token punctuation">.</span>last_name<span class="token keyword">from</span> employees emp<span class="token keyword">join</span> employees manager<span class="token keyword">on</span> emp<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> manager<span class="token punctuation">.</span>employee_id<span class="token keyword">join</span> departments d<span class="token keyword">on</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组函数"><a class="header-anchor" href="#分组函数"></a>分组函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- avg 会忽略空值 如果不想忽略则改为  avg(nvl(commission_pct,0))</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span>   employees<span class="token keyword">where</span>  job_id <span class="token operator">like</span> <span class="token string">'%REP%'</span><span class="token comment">-- count 会忽略空值 不想忽略则count(nvl(department_id))</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token comment">-- 非空且不重复的记录总数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> department_id<span class="token punctuation">)</span><span class="token keyword">from</span>   employees<span class="token comment">--gourp by</span><span class="token keyword">select</span> department_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">,</span>job_id<span class="token comment">-- having where 里面不能出现分组函数 此时替换为having即可</span><span class="token keyword">select</span> department_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">,</span>job_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询"><a class="header-anchor" href="#子查询"></a>子查询</h3><h4 id="单行子查询"><a class="header-anchor" href="#单行子查询"></a>单行子查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> last_name<span class="token keyword">from</span>   employees<span class="token keyword">where</span>  salary <span class="token operator">></span>               <span class="token punctuation">(</span><span class="token keyword">select</span> salary                <span class="token keyword">from</span>   employees                <span class="token keyword">where</span>  last_name <span class="token operator">=</span> <span class="token string">'abel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多行子查询"><a class="header-anchor" href="#多行子查询"></a>多行子查询</h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY</td><td>和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>和子查询返回的所有值比较</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- any</span><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> salary<span class="token keyword">from</span>   employees<span class="token keyword">where</span>  salary <span class="token operator">&lt;</span> <span class="token keyword">any</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary                     <span class="token keyword">from</span>   employees                     <span class="token keyword">where</span>  job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">)</span><span class="token operator">and</span>    job_id <span class="token operator">&lt;></span> <span class="token string">'IT_PROG'</span><span class="token punctuation">;</span><span class="token comment">-- all</span><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> salary<span class="token keyword">from</span>   employees<span class="token keyword">where</span>  salary <span class="token operator">&lt;</span> <span class="token keyword">all</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary                     <span class="token keyword">from</span>   employees                     <span class="token keyword">where</span>  job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">)</span><span class="token operator">and</span>    job_id <span class="token operator">&lt;></span> <span class="token string">'IT_PROG'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建管理表"><a class="header-anchor" href="#创建管理表"></a>创建管理表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看用户定义的表</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables<span class="token comment">-- 查看用户定义的各种数据库对象</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> object_type <span class="token keyword">from</span> user_objects<span class="token comment">-- 查看用户定义的表, 视图, 同义词和序列</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  user_catalog<span class="token comment">-- 创建表的第一种方式</span><span class="token keyword">create</span> <span class="token keyword">table</span> dept <span class="token punctuation">(</span>deptno number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 1位小数位</span>                   dname varchar2<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   loc varchar2<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表的第二种方式</span><span class="token comment">-- 会导入数据</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp2<span class="token keyword">as</span><span class="token keyword">select</span> employee_id id<span class="token punctuation">,</span>last_name name<span class="token punctuation">,</span>hire_date<span class="token punctuation">,</span>salary<span class="token keyword">from</span> employees<span class="token comment">-- 不导入数据</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp2<span class="token keyword">as</span><span class="token keyword">select</span> employee_id id<span class="token punctuation">,</span>last_name name<span class="token punctuation">,</span>hire_date<span class="token punctuation">,</span>salary<span class="token keyword">from</span> employees<span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">add</span> <span class="token punctuation">(</span>email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">modify</span> <span class="token punctuation">(</span>email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">modify</span> <span class="token punctuation">(</span>salary number<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">drop</span> <span class="token keyword">column</span> email<span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">rename</span> salary <span class="token keyword">to</span> sal<span class="token keyword">drop</span> <span class="token keyword">table</span> emp1<span class="token keyword">truncate</span> <span class="token keyword">table</span> emp1<span class="token comment">-- 清空表 不可回滚</span><span class="token keyword">rename</span> emp2 <span class="token keyword">to</span> employees2<span class="token comment">-- 将列设置为不可用</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">set</span> unused <span class="token keyword">column</span> test_column<span class="token comment">-- 移除不使用的列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1<span class="token keyword">drop</span> unused <span class="token keyword">columns</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据处理"><a class="header-anchor" href="#数据处理"></a>数据处理</h3><h4 id="insert"><a class="header-anchor" href="#insert"></a>insert</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> emp1<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span>employee_id<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'EE'</span><span class="token punctuation">,</span><span class="token number">1005</span><span class="token punctuation">)</span><span class="token comment">-- 数据从其他表导入</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span>hire_date<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>salary<span class="token punctuation">)</span><span class="token keyword">select</span> employee_id<span class="token punctuation">,</span>hire_date<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>salary<span class="token keyword">from</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="update"><a class="header-anchor" href="#update"></a>update</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> emp1<span class="token keyword">set</span> salary<span class="token operator">=</span><span class="token number">12000</span><span class="token keyword">where</span> employee_id <span class="token operator">=</span> <span class="token number">179</span><span class="token keyword">commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="delete"><a class="header-anchor" href="#delete"></a>delete</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> department<span class="token keyword">where</span> department_id <span class="token operator">=</span><span class="token number">270</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="事务"><a class="header-anchor" href="#事务"></a>事务</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">commit</span><span class="token keyword">savepoint</span> A<span class="token keyword">rollback</span> <span class="token keyword">to</span> <span class="token keyword">savepoint</span> A<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>employees <span class="token keyword">for</span> <span class="token keyword">update</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="约束"><a class="header-anchor" href="#约束"></a>约束</h3><p>五种约束 NOT NULL,UNIQUE,PRIMARY KEY,FOREIGN KEY,CHECK</p><h4 id="NOT-NULL"><a class="header-anchor" href="#NOT-NULL"></a>NOT NULL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp2<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp3_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UNIQUE-都为空不违反唯一约束"><a class="header-anchor" href="#UNIQUE-都为空不违反唯一约束"></a>UNIQUE (都为空不违反唯一约束)</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp3<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp3_id_uk <span class="token keyword">unique</span><span class="token punctuation">,</span>  name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp3_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--表级约束</span>  <span class="token keyword">constraint</span> emp3_email_uk <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PRIMARY-KEY"><a class="header-anchor" href="#PRIMARY-KEY"></a>PRIMARY KEY</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp4<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp4_id_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp4_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--表级约束</span>  <span class="token keyword">constraint</span> emp4_email_uk <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp4<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp4_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--表级约束</span>  <span class="token keyword">constraint</span> emp4_id_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token keyword">constraint</span> emp4_email_uk <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FOREIGN-KEY"><a class="header-anchor" href="#FOREIGN-KEY"></a>FOREIGN KEY</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp4<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp4_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  department_id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--表级约束</span>  <span class="token keyword">constraint</span> emp4_id_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token keyword">constraint</span> emp4_email_uk <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>  <span class="token keyword">constraint</span> emp4_dept_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>department_id<span class="token punctuation">)</span> <span class="token keyword">references</span> departments<span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp4<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp4_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  department_id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--表级约束</span>  <span class="token keyword">constraint</span> emp4_id_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token keyword">constraint</span> emp4_email_uk <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>  <span class="token keyword">constraint</span> emp4_dept_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>department_id<span class="token punctuation">)</span> <span class="token keyword">references</span> departments<span class="token punctuation">(</span>department_id<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span>  <span class="token comment">-- ON DELETE CASCADE(级联删除): 当父表中的列被删除时，子表中相对应的列也被删除</span>  <span class="token keyword">references</span> departments<span class="token punctuation">(</span>department_id<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">set</span> <span class="token boolean">null</span>  <span class="token comment">-- ON DELETE SET NULL(级联置空): 子表中相应的列置空</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CHECK"><a class="header-anchor" href="#CHECK"></a>CHECK</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp4<span class="token punctuation">(</span>  id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> emp4_name_nn <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  email varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  salary number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>salary <span class="token operator">></span> <span class="token number">1500</span> <span class="token operator">and</span> salary <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">)</span>  department_id number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--表级约束</span>  <span class="token keyword">constraint</span> emp4_id_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token keyword">constraint</span> emp4_email_uk <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>  <span class="token keyword">constraint</span> emp4_dept_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>department_id<span class="token punctuation">)</span> <span class="token keyword">references</span> departments<span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-2"><a class="header-anchor" href="#-2"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-3"><a class="header-anchor" href="#-3"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-4"><a class="header-anchor" href="#-4"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-5"><a class="header-anchor" href="#-5"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-6"><a class="header-anchor" href="#-6"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-7"><a class="header-anchor" href="#-7"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-8"><a class="header-anchor" href="#-8"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="-9"><a class="header-anchor" href="#-9"></a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="mysql-知识复习"><a class="header-anchor" href="#mysql-知识复习"></a>mysql 知识复习</h2><h3 id="数据类型"><a class="header-anchor" href="#数据类型"></a>数据类型</h3><table><thead><tr><th>类型</th><th>长度</th><th>格式</th><th>其他</th></tr></thead><tbody><tr><td>double</td><td>8</td><td>双精度浮点数</td><td></td></tr><tr><td>enum</td><td>–</td><td></td><td>单选,比如性别enum(‘a’,‘b’,‘c’)</td></tr><tr><td>set</td><td>–</td><td>多选set(‘1’,‘2’,‘3’)</td><td></td></tr><tr><td>date</td><td>3</td><td>日期yyyy-mm-dd</td><td></td></tr><tr><td>time</td><td>3</td><td>时间点或持续时间hh:mm:ss</td><td></td></tr><tr><td>year</td><td>1</td><td>年份值yyyy</td><td></td></tr><tr><td>char</td><td>0~255</td><td>定长字符串</td><td></td></tr><tr><td>varchar</td><td>0~255</td><td>变长字符串</td><td></td></tr><tr><td>text</td><td>0~65535</td><td>长文本数据</td><td></td></tr></tbody></table><p>注:</p><ol><li><p>整数除了 int 外，还有 tinyint、smallint、mediumint、bigint。</p></li><li><p>char 和 varchar 的区别: char 的长度是固定的，而 varchar 的长度是可以变化的，比如，存储字符串 “abc&quot;，对于 char(10)，表示存储的字符将占 10 个字节(包括 7 个空字符)，而同样的 varchar(12) 则只占用4个字节的长度，增加一个额外字节来存储字符串本身的长度，12 只是最大值，当你存储的字符小于 12 时，按实际长度存储。</p></li></ol><p>enum和set的区别: enum 类型的数据的值，必须是定义时枚举的值的其中之一，即单选，而 set 类型的值则可以多选。</p><h2 id="sql-server"><a class="header-anchor" href="#sql-server"></a>sql server</h2><h3 id="数据类型-2"><a class="header-anchor" href="#数据类型-2"></a>数据类型</h3><h4 id="char-nchar-varchar-nvarchar"><a class="header-anchor" href="#char-nchar-varchar-nvarchar"></a>char/nchar varchar/nvarchar</h4><p>如果是带n则表示使用unicode编码 如果该字段中会插入中文则需要带n</p><h4 id="decimal-1-2"><a class="header-anchor" href="#decimal-1-2"></a>decimal(1,2)</h4><p>小数</p><h4 id="bit"><a class="header-anchor" href="#bit"></a>bit</h4><p>1位相当于boolean</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;必要的sql 备注&lt;/p&gt;</summary>
    
    
    
    <category term="sql" scheme="http://stdiolosss.com/categories/sql/"/>
    
    
    <category term="sql" scheme="http://stdiolosss.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>use-vim-as-a-edittool</title>
    <link href="http://stdiolosss.com/2018/09/17/cn/use-vim-as-a-edittool/"/>
    <id>http://stdiolosss.com/2018/09/17/cn/use-vim-as-a-edittool/</id>
    <published>2018-09-17T08:24:45.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>使用大量插件和快捷键绑定使得终端下的vim达到生产需求</p><span id="more"></span><h2 id="平台"><a class="header-anchor" href="#平台"></a>平台</h2><p>mac iterm2</p><h2 id="配置-2"><a class="header-anchor" href="#配置-2"></a>配置</h2><ol><li><p>vim 配置<br>本次使用的是<a href="https://neovim.io/">neovim</a><br>关于neovim 可以参考我的另一篇博客<a href="#">Post not found: vim-notes</a><br>配置好后可以在terminal里使用原生的vim</p></li><li><p>iterm2 配置<br>参考 <a href="#">Post not found: terminal</a></p></li><li><p>备份配置</p></li></ol><p>所有的home目录下的.开头的文件被称为dotfiles 你可以在github上上传自己的dotfiles 备份自己的工作区域<br>我所用的工具是 <a href="https://github.com/andsens/homeshick">homeshick</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用大量插件和快捷键绑定使得终端下的vim达到生产需求&lt;/p&gt;</summary>
    
    
    
    <category term="vim" scheme="http://stdiolosss.com/categories/vim/"/>
    
    
    <category term="vim" scheme="http://stdiolosss.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>terminal</title>
    <link href="http://stdiolosss.com/2018/08/11/cn/terminal/"/>
    <id>http://stdiolosss.com/2018/08/11/cn/terminal/</id>
    <published>2018-08-11T13:03:22.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>主要是iterm2下的bash和zsh的一些常用技巧和插件总结</p><span id="more"></span><h2 id="iterm2-设置"><a class="header-anchor" href="#iterm2-设置"></a>iterm2 设置</h2><p>这里只列举一些重要设置其他的可以 <a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html">参考这里</a></p><ol><li><p>字体安装<br>配合主题powerlevel9k 需要安装字体</p></li><li><p>安装主题</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改zsh主题</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"powerlevel9k/powerlevel9k"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>安装字体</li></ol><p><code>https://github.com/ryanoasis/nerd-fonts</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew tap homebrew/cask-fontsbrew <span class="token function">install</span> font-hack-nerd-font<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>修改配置.zshrc 中添加</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">POWERLEVEL9K_MODE</span><span class="token operator">=</span><span class="token string">"nerdfont-complete"</span><span class="token comment"># Customise the Powerlevel9k prompts</span><span class="token assign-left variable">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</span><span class="token operator">=</span><span class="token punctuation">(</span>ssh <span class="token function">dir</span> vcs newline status<span class="token punctuation">)</span><span class="token assign-left variable">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token assign-left variable">POWERLEVEL9K_PROMPT_ADD_NEWLINE</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>使修改生效</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="命令行tips"><a class="header-anchor" href="#命令行tips"></a>命令行tips</h2><p>参看这个<a href="https://www.bilibili.com/video/av4337389/">视频</a></p><table><thead><tr><th style="text-align:left">按键</th><th style="text-align:left">操作</th></tr></thead><tbody><tr><td style="text-align:left">ctrl+b</td><td style="text-align:left">命令行向前</td></tr><tr><td style="text-align:left">ctrl+f</td><td style="text-align:left">向后</td></tr><tr><td style="text-align:left">alt+b</td><td style="text-align:left">以单词为单位向前</td></tr><tr><td style="text-align:left">alt+f</td><td style="text-align:left">以单词为单位向后</td></tr><tr><td style="text-align:left">ctrl+a</td><td style="text-align:left">行首</td></tr><tr><td style="text-align:left">ctrl+e</td><td style="text-align:left">行尾</td></tr><tr><td style="text-align:left">ctrl+u</td><td style="text-align:left">删除当前命令</td></tr><tr><td style="text-align:left">ctrl+h</td><td style="text-align:left">从后向前删除</td></tr><tr><td style="text-align:left">ctrl+d</td><td style="text-align:left">从前向后删除</td></tr><tr><td style="text-align:left">alt+d</td><td style="text-align:left">删除一个单词</td></tr><tr><td style="text-align:left">ctrl+k</td><td style="text-align:left">删除到行尾</td></tr><tr><td style="text-align:left">ctrl+p</td><td style="text-align:left">上一条命令</td></tr><tr><td style="text-align:left">ctrl+n</td><td style="text-align:left">下一条命令</td></tr><tr><td style="text-align:left">ctrl+r</td><td style="text-align:left">搜索历史命令</td></tr><tr><td style="text-align:left">ctrl+l</td><td style="text-align:left">清屏</td></tr></tbody></table><p><strong>iterm2下opt+b无效解决方法</strong></p><pre class="line-numbers language-none"><code class="language-none">iTerm2 &gt; Preferences &gt; Profiles &gt; Keyskeyboard shortcut ⌥+baction send escape sequenceesc+ b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>iterm2 的常用快捷键</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">新建标签：command + t关闭标签：command + w切换标签：command + 数字 <span class="token builtin class-name">command</span> + 左右方向键切换全屏：command + enter查找：command + f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>常用插件</h1><ol><li><a href="https://github.com/wting/autojump">autojump</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> autojump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>.zshrc</code>里面 配置plugins=(autojump)<br>快捷键 <code>j foo</code><br>注: autojump 只能jump到已经打开过一次后的目录</p><ol><li><p><a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/">tmux</a></p><ol><li>修改配置 <code>~/.tmux.conf</code> 之后 使用<code>tmux source-file ~/.tmux.conf</code>使其生效 我设置了一个快捷键  <code>tmrl</code></li><li>值得参考的文章 <a href="http://louiszhai.github.io/2017/09/30/tmux/">http://louiszhai.github.io/2017/09/30/tmux/</a></li><li>tmux 里使用复制粘贴 配置里面加一行<code>set -g mouse on</code> 在iterm2 <code>Preference-&gt;General-&gt;copy to pasteboard to selection</code> 然后在按住option后选择区域 最后粘贴即可</li><li>sessions should be nested with care, unset $TMUX to force 输入 <code>unset TMUX</code></li><li>以下是个人备份不是默认快捷键</li></ol></li><li><p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></p><ol><li>安装</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$&#123;ZSH_CUSTOM<span class="token operator">:-</span>~<span class="token operator">/</span>.oh-my-zsh<span class="token operator">/</span>custom&#125;</span>/plugins/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>设置</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>plugins<span class="token punctuation">..</span>.<span class="token punctuation">]</span> zsh-autosuggestions<span class="token punctuation">)</span><span class="token comment">#绑定自定义快捷键</span>bindkey <span class="token string">','</span> autosuggest-accept<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></p><ol><li>安装</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">$&#123;ZSH_CUSTOM<span class="token operator">:-</span>~<span class="token operator">/</span>.oh-my-zsh<span class="token operator">/</span>custom&#125;</span>/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>设置</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>plugins<span class="token punctuation">..</span>.<span class="token punctuation">]</span> zsh-syntax-highlighting<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><table><thead><tr><th style="text-align:left">按键</th><th style="text-align:left">操作</th></tr></thead><tbody><tr><td style="text-align:left">-</td><td style="text-align:left">垂直分</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">水平分</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">关闭当前窗口</td></tr><tr><td style="text-align:left">z</td><td style="text-align:left">最大化窗口</td></tr><tr><td style="text-align:left">ctrl+d</td><td style="text-align:left">关闭窗口</td></tr></tbody></table><p>常用指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux new -s demo <span class="token comment"># 新建一个名称为demo的会话</span>tmux a -t demo <span class="token comment"># 进入到名称为demo的会话</span>tmux kill-session -t demo <span class="token comment"># 关闭demo会话</span>tmux kill-server <span class="token comment"># 关闭服务器，所有的会话都将关闭</span>tmux <span class="token function">ls</span> <span class="token comment"># 查看所有会话，提倡使用简写形式</span>Sessions:new<span class="token operator">&lt;</span>CR<span class="token operator">></span>  new sessions  list sessions$  name sessionWindowsc  create windoww  list windowsn  next windowp  previous windowf  <span class="token function">find</span> window,  name window<span class="token operator">&amp;</span>  <span class="token function">kill</span> window<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般工作模式 是1个session里面开多个window 然后一个window开nvim 其他的可以跑命令 可以用 prefix+n prefx+p 切换window</p></blockquote><p>Copy Mode<br>需要在配置文件里面加入<br><code>setw -g mode-keys vi</code>和<code>bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel &quot;pbcopy&quot;</code></p><ol><li>PREFIX [</li><li>空格开始选择</li><li>y复制并退出/回车直接退出</li></ol><p>去掉小圆点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux a -d <span class="token comment">#命令</span>`: a -d <span class="token comment">#快捷键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 Preferences &gt; Appearance 里有个「 show tab bar even when there is only one tab 」的 toggle</p><h1>参考</h1><ol><li><p><a href="http://louiszhai.github.io/2017/09/30/tmux/#%E5%AF%BC%E8%AF%BB">http://louiszhai.github.io/2017/09/30/tmux/#导读</a></p></li><li><p><a href="https://gist.github.com/MohamedAlaa/2961058">https://gist.github.com/MohamedAlaa/2961058</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是iterm2下的bash和zsh的一些常用技巧和插件总结&lt;/p&gt;</summary>
    
    
    
    <category term="terminal" scheme="http://stdiolosss.com/categories/terminal/"/>
    
    
    <category term="zsh" scheme="http://stdiolosss.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>chrome</title>
    <link href="http://stdiolosss.com/2018/08/07/cn/chrome-extensions/"/>
    <id>http://stdiolosss.com/2018/08/07/cn/chrome-extensions/</id>
    <published>2018-08-07T11:49:17.000Z</published>
    <updated>2024-10-15T12:11:30.361Z</updated>
    
    <content type="html"><![CDATA[<p>chrome 知识整理</p><span id="more"></span><h1>默认快捷键</h1><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">alt+left</td><td style="text-align:left">后退</td></tr><tr><td style="text-align:left">alt+right</td><td style="text-align:left">前进</td></tr><tr><td style="text-align:left">cmd+y</td><td style="text-align:left">历史</td></tr><tr><td style="text-align:left">cmd+123</td><td style="text-align:left">标签间切换</td></tr></tbody></table><h1>常用插件</h1><h2 id="vimium"><a class="header-anchor" href="#vimium"></a>vimium</h2><blockquote><p>可以像用vim一样使用chrome</p></blockquote><h3 id="常用快捷键-2"><a class="header-anchor" href="#常用快捷键-2"></a>常用快捷键</h3><p>| 快捷键    | 功能                           |<br>|:----------|: -------------------------------|<br>| b         | 搜索书签                       |<br>| B         | 搜索书签新标签页打开           |<br>| F         | 在新标签页打开                 |<br>| f         | 在当前页打开                   |<br>| K         | 选中左边一个标签               |<br>| J         | 选中右边一个标签               |<br>| r         | reload 当前页面                |<br>| t         | 新建一个标签                   |<br>| o         | 搜索在当前页打开               |<br>| O         | 搜索在新建页打开               |<br>| yy        | 拷贝当前网址                   |<br>| x         | 关闭当前页面                   |<br>| gi        | 定位到第一个搜索框 tab可以切换 |<br>| command+l | 定位到地址栏(mac自带)          |</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;chrome 知识整理&lt;/p&gt;</summary>
    
    
    
    <category term="chrome" scheme="http://stdiolosss.com/categories/chrome/"/>
    
    
    <category term="chrome" scheme="http://stdiolosss.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>留学二三事</title>
    <link href="http://stdiolosss.com/2018/03/06/cn/%E7%95%99%E5%AD%A6%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://stdiolosss.com/2018/03/06/cn/%E7%95%99%E5%AD%A6%E4%BA%8C%E4%B8%89%E4%BA%8B/</id>
    <published>2018-03-06T09:37:31.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>日本留学的一些准备</p><span id="more"></span><h2 id="语言学校"><a class="header-anchor" href="#语言学校"></a>语言学校</h2><p>一般自己找中介 联系学校老师 如果有名额就可以申请 有钱就可以读 所以要趁早不然好的学校就没有名额了最好提早一年</p><ol><li><p>在留申请<br>这个需要的资料每年会有些不同 具体听中介的</p><ol><li>存款20万证明(也许会需要银行的流水 如果需要则需要提前准备)</li><li>语言学时证明</li><li>毕业证书</li><li>亲子关系公证<br>…</li></ol></li><li><p>签证办理<br>一般去代理机构办理 <a href="http://www.cn.emb-japan.go.jp/aboutus.htm">查看这里</a> 价格比去领事馆贵一些 每个地区需要的资料有所不同 具体的需要自己打电话咨询</p></li><li><p>一些小tips(想到什么写什么可能比较乱哈)</p><ol><li><p>照片需要 3cm<em>4cm 8张(在留申请) 白底 4.5</em>4.5 1张(签证用) 2寸 20张 (去日本时候用)</p></li><li><p>机票早点买 一般在留通过学校通知过了就可以买了 不然等签证过了再买就太高了<br>比如收到通知是4.4 4.5 那么就买4.4的就好了如果要便宜的话就买从香港转机的 其他的转机要看清需不需要过境签需要的话就不要买了 因为多办一个签证很麻烦而且还费钱 还有第一次去别买廉航(行李另外算费用很贵的)</p></li><li><p>如果不住宿的话 要找中介 在在留下来前 一两个星期找好 在留一通过就可以直接订房了 晚了就没什么便宜的了</p></li><li><p>国内日语学学好</p></li><li><p>好学校托福是必须的</p></li><li><p>早点换些日元 住宿舍的话50万 住外面的话30万 好像最多只能带100万入境</p></li><li><p>办一张南京银行的储蓄卡(或者境外取现不要手续费的)这卡境外取现一年最多等值10万人民币一天最多1万(国家外汇管理局规定的)所以存10万就好了 有条件的可以办张全币种的visa卡会方便很多</p></li><li><p>交学费的时候可以用中国银行的app 不然要提交资料就比较麻烦 用app是抽查的 抽不到就不需要提供资料了 当然手续费就不是最便宜的了 我当时转了429000日币扣了180人民币手续费</p></li><li><p>如果是本科生 一定一定要打成绩单 最好打5份</p></li><li><p>第一次去的话行李箱可以买24或26寸的 买太大的没有用因为每个箱子限制23kg 双层防爆拉链 pc材质 或者布的也行 铝框的有点重 注意看机票上的托运公斤数超重是要吃大亏的</p></li></ol></li><li><p>行李</p><ol><li>随身行李<ol><li>50万日元</li><li>中国银行银联卡(跨境取款无需手续费但是atm机器还是回收手续费的 atm机一次限额10万日元 我上次取10万收了75日元手续费 每个机器不一样看清楚再取)</li><li>招商银行visa信用卡</li><li>身份证&amp;护照&amp;资格外活动许可申请书</li><li>笔记本电脑</li><li>零钱包(日本用钱会有很多硬币这个必须备一个)</li><li>流量卡5天(很有用!!!)</li><li>照片</li><li>卡西欧电子词典 这个日本买的都是日本学生用的 建议国内买 买哪代都可以 可以的话收个二手 主要上课用 平时手机查也可以 不强求看个人需要</li><li>插头转换器</li><li>拖线板</li><li>印章 13.5mm 紫檀 繁体 全名(很有用!!!) 这个最好办两个一样的因为印章丢了很麻烦<br>印章有全名和单独的姓的 可以两个都做一个也可以只做单独姓的一个因为全名的一般都是银行卡办理或者其他比较正式的场合用的,而且有些银行用单独的姓也是可以的</li></ol></li><li>行李箱行李<ol><li>行李箱(26寸 拉链 PC)</li><li>衣服<ol><li>换洗衣服</li><li>西服领带皮鞋</li></ol></li><li>书<br>1.日语书<br>1. N1N2试卷<br>1. N1语法书<br>1.专业书</li><li>泡面(一开始到日本可能吃的不习惯可以备点)</li></ol></li></ol></li><li><p>下飞机后需要做的一些事</p><ol><li>下飞机过海关<ol><li>下飞机之后 留学生需要拿两个票 在飞机上空姐都会给的可以问她们要 没有的话在海关前面一排放有各种语言的 选中文的就可以</li><li>第二张卡是 你拿了行李需要出飞机场的时候需要的</li></ol></li></ol></li><li><p>开学需要做的事</p><ol><li>在留地址登录和国民健康保险<br>这个学校会有人带去办理 带上在留卡 护照 黑笔 和 印章</li><li>办理邮局银行卡<ol><li>带上在留卡 印章 到附近的邮局办理</li></ol></li><li>办手机(需要地址登录和银行卡都办好了才行 当然也可以先不绑定银行卡先办手机 但是最终还是要去绑的)<ol><li>如果需要买手机<br>softbank 这个就比较贵了一个月都是7000多的 具体看当时的活动</li><li>不买手机<br>办y-mobile 的卡 需要信用卡(自己或者家人有都可以 需要visa jcb mastercard里面一个) 一个月 1980 2G 10分钟通话免费 第二年可以转 softbank</li><li>总结<br>y-mobile也可以办手机 就是买不了高端机只能买便宜的安卓机器 你可以不要他的手机 买了y-mobile的卡自己再买个手机 这样是最划算的</li></ol></li><li>拿学生证<br>需要带 在留卡 入学证明 护照 到学校找老师拿</li><li>联系私塾<br>私塾有很多自己多问多试听 多了解情况 毕竟也不便宜 我了解到的私塾有 名校 启程 唯新 沐刃 有间学堂 价格60万日元起步(大学院学部基本都是这个价)</li></ol></li><li><p>关于语言学校</p><ol><li>我在早稻田文化馆 其他的学校情况我不太清楚</li><li>关于教学<ol><li>老师都是全日语教学 不管你是什么班</li><li>老师有日本人也有中国人 我们班一周4个老师2个日本人 2个中国人 不过都挺好的</li><li>进度不算快一天大家日语一节课(我上的是初级班)</li><li>所以还是来之前学好点吧 英语和日语至少有一个要能和教授交流的才行</li></ol></li></ol></li><li><p>关于生活</p><ol><li><p>能做饭</p><ol><li>找附近的业务超市或者大超市 办个积分卡 然后买必要的食材 一下罗列一些便宜的菜当然也和季节有关看着买吧</li><li>蔬菜<br>1.豆芽菜<br>1.キャベツ<br>1.黄瓜</li><li>水果<br>1.香蕉</li><li>肉(超市的肉制品在保质期前一天晚上8 9点就会打折)<br>1.速冻鸡肉<br>1.米国猪肉 88/100g</li></ol></li><li><p>不做饭<br>1.吉野家<br>1.半价便当(这个要看当地的超市 一般都是大超市晚上到8点或者更晚)</p></li></ol></li></ol><h1>写在最后</h1><p>我在2019年4月结束了在语言学校的学习.因为种种原因没有进入大学院学习,而是直接进入了日本的职场,因为之前从事的也是软件开发的工作所以想从事同样的工作,不管怎样希望来到日本的朋友珍惜时间,好好学习,加油!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日本留学的一些准备&lt;/p&gt;</summary>
    
    
    
    <category term="日本留学" scheme="http://stdiolosss.com/categories/%E6%97%A5%E6%9C%AC%E7%95%99%E5%AD%A6/"/>
    
    
    <category term="日本留学" scheme="http://stdiolosss.com/tags/%E6%97%A5%E6%9C%AC%E7%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>pc-notes</title>
    <link href="http://stdiolosss.com/2017/12/07/cn/pc-notes/"/>
    <id>http://stdiolosss.com/2017/12/07/cn/pc-notes/</id>
    <published>2017-12-06T17:30:47.000Z</published>
    <updated>2024-10-15T12:11:30.365Z</updated>
    
    <content type="html"><![CDATA[<p>一些pc知识笔记</p><span id="more"></span><p>路漫漫其修远兮,吾将上下而求索</p><h2 id="system"><a class="header-anchor" href="#system"></a>system</h2><h3 id="UEFI"><a class="header-anchor" href="#UEFI"></a>UEFI</h3><h3 id="GPT"><a class="header-anchor" href="#GPT"></a>GPT</h3><h3 id="install-win10"><a class="header-anchor" href="#install-win10"></a>install win10</h3><h4 id="download-win10"><a class="header-anchor" href="#download-win10"></a><a href="https://msdn.itellyou.cn/">download win10</a></h4><h2 id="hardware"><a class="header-anchor" href="#hardware"></a>hardware</h2><p>想要使用 GPT分区 UEFI启动的话如下操作 <a href="https://jingyan.baidu.com/article/425e69e6e1b0a1be15fc16aa.html">可以参考这个</a><br>就是先在pe或其他系统里面 用diskGenius转成GUID格式 然后再从u盘启动 安装的时候不要再格式化那个硬盘直接选盘符安装即可</p><h3 id="4k-对齐"><a class="header-anchor" href="#4k-对齐"></a>4k 对齐</h3><h3 id="ACHI"><a class="header-anchor" href="#ACHI"></a>ACHI</h3><h2 id="固态"><a class="header-anchor" href="#固态"></a>固态</h2><blockquote><p>NAND闪存：不同的颗粒，不同的寿命 市面上的SSD的NAND闪存颗粒分为SLC,MLC,TLC三种。简单来说，SLC是速度最大，寿命最长，所以当然也就是最贵的；MLC则是SLC速度的折中，寿命的十分之一，三分之一的价格（大约），是目前最流行的一种，适中的各种属性十分合适普通消费者。TLC在刚刚推出的时候被人诟病为短寿、廉价、低端，不过随着科技的进步，尤其是近几年，在三星力推TLC技术之后，TLC的速度问题和寿命问题已经得到了很大改善，正因为如此，越来越多的厂商加入了TLC颗粒SSD的生产行列中。因此选择TLC也是没有问题的哦~</p></blockquote><h2 id="硬盘操作"><a class="header-anchor" href="#硬盘操作"></a>硬盘操作</h2><p>一般用 DiskGenius<br>如果硬盘变为raw了 可以用管理员打开cmd 运行 chkdsk D:/f  D就是需要恢复的盘</p><h3 id="装机软件"><a class="header-anchor" href="#装机软件"></a>装机软件</h3><ol><li>常用软件<br>1.<a href="https://im.qq.com/pcqq/">QQ</a><br>1.<a href="http://wangwang.taobao.com/">阿里旺旺</a></li><li>系统软件<br>1.<a href="https://www.kaspersky.com.cn/downloads/thank-you/total-security-free-trial">卡巴斯基</a><br>1.<a href="http://www.kbtool.cn/">卡巴工具箱</a><br>1.<a href="https://cn.ultraiso.net/xiazai.html">软碟通</a><br>激活 王涛 7C81-1689-4046-626F</li><li>输入法<br>1.<a href="https://pinyin.sogou.com/">搜狗</a><br>1.<a href="http://ime.baidu.jp/type/">百度日语输入法</a></li><li>学习工具<br>1.<a href="http://www.ankichina.net/">anki</a><br>1.<a href="http://www.aboboo.com/download/">aboboo</a><br>1.<a href="http://note.youdao.com/download.html">有道云笔记</a></li><li>Apple<br>1.<a href="https://www.apple.com/cn/itunes/">itunes</a><br>1.<a href="https://www.itools.cn/">itools</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些pc知识笔记&lt;/p&gt;</summary>
    
    
    
    <category term="pc" scheme="http://stdiolosss.com/categories/pc/"/>
    
    
    <category term="pc" scheme="http://stdiolosss.com/tags/pc/"/>
    
  </entry>
  
</feed>
